


* MELPA
#+begin_src emacs-lisp 
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
#+end_src

* Init
load theme
#+begin_src emacs-lisp 
  (use-package immaterial-theme
    :ensure t
    :config
    (load-theme 'immaterial-dark t))
#+end_src

soft wrap lines (wrap around past screen boundary)
#+begin_src emacs-lisp 
(global-visual-line-mode 1)
#+end_src

highlight current line
#+begin_src emacs-lisp 
(global-hl-line-mode t)
#+end_src


turn on variable syntax highlighting
#+begin_src emacs-lisp 
(add-hook 'after-init-hook 'global-color-identifiers-mode) 
#+end_src

no startup message
#+begin_src emacs-lisp 
(setq inhibit-startup-message t) 
#+end_src

use [[https://github.com/technomancy/better-defaults][better defaults]]
#+begin_src emacs-listp
(require 'better-defaults)
#+end_src


No tabs!
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

* Templates
** Enable easy templates (from [[https://emacs.stackexchange.com/a/46992][here]])
#+begin_src emacs-lisp 
(require 'org-tempo)
#+end_src

* Keybindings
** Personal

Lets keep `C-c d` for personal shortcuts.
#+begin_src emacs-lisp 
(global-set-key (kbd "C-c d p") #'org-pomodoro)
#+end_src

* Org
** Init

indent all org mode files
#+begin_src emacs-lisp 
(setq org-startup-indented t)
#+end_src

enable automated indent mode for org files
#+begin_src emacs-lisp 
(add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

enable pretty bullets in org-mode
#+begin_src emacs-lisp 
(use-package org-bullets
  :ensure t
  :config 
(add-hook 'org-mode-hook 'org-bullets-mode))
#+end_src

#+begin_src emacs-lisp 
(setq org-agenda-files '("~/org-roam"))
#+end_src



** Other
Fancy TODO states
#+begin_src emacs-lisp 
(setq org-todo-keywords '((sequence "☛ TODO(t)" "|" "✔ DONE(d)") (sequence "⚑ WAITING(w)" "|") (sequence "|" "✘ CANCELED(c)")))
#+end_src


* Modules
** Tabbar

Show a tabbar at the top of the screen.

#+begin_src emacs-lisp 
(use-package tabbar
:ensure t
:config (tabbar-mode 1)
)
#+end_src

** Treemacs
A file browser.

#+begin_src emacs-lisp 

 (use-package treemacs
    :ensure t
    :defer t
    :config
    (progn

      (setq treemacs-follow-after-init          t
            treemacs-width                      35
            treemacs-indentation                2
            treemacs-git-integration            t
            treemacs-collapse-dirs              3
            treemacs-silent-refresh             nil
            treemacs-change-root-without-asking nil
            treemacs-sorting                    'alphabetic-desc
            treemacs-show-hidden-files          t
            treemacs-never-persist              nil
            treemacs-is-never-other-window      nil
            treemacs-goto-tag-strategy          'refetch-index)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t))
    :bind
    (:map global-map
          ([f8]        . treemacs-toggle)
          ([f9]        . treemacs-projectile-toggle)
          ("<C-M-tab>" . treemacs-toggle)
          ("M-0"       . treemacs-select-window)
          ("C-c 1"     . treemacs-delete-other-windows)
        ))


  (use-package treemacs-projectile
    :defer t
    :ensure t
    :config
    (setq treemacs-header-function #'treemacs-projectile-create-header)
    )



#+end_src

** Projectile

#+begin_src emacs-lisp 
(projectile-mode +1)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+end_src

** Random
fzf support
#+begin_src emacs-lisp 
(use-package fzf :ensure t)
#+end_src

#+begin_src emacs-lisp 
(use-package all-the-icons 
:ensure t
:defer 0.5)
#+end_src

[[https://github.com/gregsexton/origami.el/tree/e558710a975e8511b9386edc81cd6bdd0a5bda74][Fancy text folding]]
#+begin_src emacs-lisp 
(use-package origami
:ensure t)
#+end_src

Highlight current line
#+begin_src emacs-lisp 
(use-package beacon
:ensure t
:config
(beacon-mode 1))
#+end_src


#+begin_src emacs-lisp 
(use-package color-theme-modern
  :ensure t)

#+end_src

WhichKey
#+begin_src emacs-lisp 

(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+end_src


dimmer, highlight current buffer
#+begin_src emacs-lisp 
(use-package dimmer
  :ensure t
  :config
   (dimmer-configure-which-key)
   (dimmer-configure-helm)
   (dimmer-mode t))
#+end_src

org-roam
#+begin_src emacs-lisp 
;; keybindings for org-roam
(use-package org-roam
      :ensure t
      :hook
      (after-init . org-roam-mode)
      :custom
      (org-roam-directory "~/org-roam")
      :bind (:map org-roam-mode-map
              (("C-c n l" . org-roam)
               ("C-c n f" . org-roam-find-file)
               ("C-c n t" . org-roam-dailies-today)
               ("C-c n y" . org-roam-dailies-yesterday)
               ("C-c n n" . org-roam-dailies-tomorrow)
               ("C-c n g" . org-roam-graph))
              :map org-mode-map
              (("C-c n i" . org-roam-insert))
              (("C-c n I" . org-roam-insert-immediate))))
#+end_src

helm

#+begin_src emacs-lisp 
(use-package helm
  :ensure t
  :config
(global-set-key (kbd "M-x") #'helm-M-x)
(global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
(global-set-key (kbd "C-x C-f") #'helm-find-files)
(helm-mode 1))
#+end_src

python

#+begin_src emacs-lisp 
(use-package elpy
  :ensure t
  :config
(elpy-enable)) ;; enable python support

;; Enable Flycheck
(when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))

;; python formatter
(use-package blacken :ensure t)
(use-package dap-mode :ensure t)
;(use-package dap-ui :ensure t)
;(use-package dap-python :ensure t :config (dap-mode 1) (dap-ui-mode 1))
#+end_src

https://github.com/zk-phi/indent-guide
show vertical lines to guide indentation
#+begin_src emacs-lisp
  (use-package indent-guide
    :ensure t
    :config
    (indent-guide-global-mode))
#+end_src

[[https://github.com/jacktasia/dumb-jump#obsolete-commands-and-options][Dumb jump]]
Note, that this disables etags.

Use `C-M g` to jump.

#+begin_src emacs-lisp
  (use-package dumb-jump
     :ensure t
     :config
      (setq xref-backend-functions (remq 'etags--xref-backend xref-backend-functions))
       (add-to-list 'xref-backend-functions #'dumb-jump-xref-activate t))
#+end_src

[[https://github.com/emacsorphanage/helm-ag][helm-ag]]
#+begin_src emacs-lisp
  (use-package helm-ag
     :ensure t)
   
#+end_src
