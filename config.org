projectile-project-search-path:PROPERTIES:
:ID:       1859DDBD-1924-4A25-910F-4DBD4965B8CB
:END:
#+TITLE: DotConfig


* Intro

My emacs init file.


** Don't forget

- ~C-c C-,~ invokes Emacs templating system.


** Still needs doing:

- Change highlight color. Selecting with a mouse or ~C-SPC~ I can't see the highlight.

* MELPA
#+begin_src emacs-lisp 
    (require 'package)
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
    (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/") t)
    (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
    (push (expand-file-name "~/.emacs.d/extra") load-path)
#+end_src

* Init
soft wrap lines (wrap around past screen boundary)
#+begin_src emacs-lisp 
  (global-visual-line-mode 1)
  (show-paren-mode 1)
  (setq show-paren-delay 0)
#+end_src

highlight current line
#+begin_src emacs-lisp 
(global-hl-line-mode t)
#+end_src

Ensure that files are reloaded from disk (when switching branches, or from dropbox sync)
#+begin_src emacs-lisp
(global-auto-revert-mode 1)
(setq auto-revert-interval 1
        ring-bell-function 'ignore
        scroll-margin 1 ; Space between cursor and top/bottom
    )


  (fset 'yes-or-no-p 'y-or-n-p)

#+end_src

Store autosaves elsewhere, borrowed from [[https://github.com/larstvei/dot-emacs][here]]
#+begin_src emacs-lisp
(defvar emacs-autosave-directory
  (concat user-emacs-directory "autosaves/")
  "This variable dictates where to put auto saves. It is set to a
  directory called autosaves located wherever your .emacs.d/ is
  located.")

;; Sets all files to be backed up and auto saved in a single directory.
(setq backup-directory-alist
      `((".*" . ,emacs-autosave-directory))
      auto-save-file-name-transforms
      `((".*" ,emacs-autosave-directory t)))
#+end_src


Preserve emacs open buffers. Restore 5 on open and then when emacs is idle open more.
#+begin_src emacs-lisp
  (setq desktop-lazy-idle-delay 25)
  (setq desktop-restore-eager 5)
  (desktop-save-mode 1)
  (desktop-read)
  (setq desktop-path '("~/.emacs.d/.cache/"))
#+end_src

turn on variable syntax highlighting
#+begin_src emacs-lisp 
(use-package color-identifiers-mode :ensure t)
(add-hook 'after-init-hook 'global-color-identifiers-mode) 
#+end_src

no startup message
#+begin_src emacs-lisp 
(setq inhibit-startup-message t) 
#+end_src

use [[https://github.com/technomancy/better-defaults][better defaults]]
#+begin_src emacs-lisp
;(use-package better-defaults :ensure t)
#+end_src

disable lockfiles
#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src


show column numbers in the mode line
#+begin_src emacs-lisp
(column-number-mode)
#+end_src

show trailing whitespaces, kinda makes emacs ugly.
#+begin_src emacs-lisp
  (setq-default show-trailing-whitespace nil)
  (setq-default indicate-empty-lines t)
#+end_src
No tabs!
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

Autoload files that have been changed on disk, but not locally
#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src

Highlight everything between two exclamation marks (!highlighted!)
#+begin_src emacs-lisp
(defun org-add-my-extra-markup ()
  "Add highlight emphasis."
  (add-to-list 'org-font-lock-extra-keywords
               '("[^\\w]\\(:\\[^\n\r\t]+:\\)[^\\w]"
                 (1 '(face highlight invisible nil)))))
(add-hook 'org-font-lock-set-keywords-hook #'org-add-my-extra-markup)
#+end_src


When we switch windows or scroll, for example, we get a wave of light near the cursor.
#+begin_src emacs-lisp
(use-package beacon
  :diminish
  :config (setq beacon-color "#666600") (setq beacon-blink-when-window-scrolls t) (setq beacon-blink-when-window-changes t)
  :hook   ((org-mode text-mode) . beacon-mode))
#+end_src

Use solarized-dark theme from doom-themes.
#+begin_src emacs-lisp
  (use-package doom-themes  :diminish
  :ensure t
  :config (load-theme 'doom-molokai t)
  )
#+end_src


Use dome modeline
#+begin_src emacs-lisp
  (use-package doom-modeline :diminish :ensure t
  :config (doom-modeline-mode 1)
          (winner-mode 1))

#+end_src


#+begin_src emacs-lisp
  (use-package golden-ratio
    :ensure t
    :diminish golden-ratio-mode
    :init (golden-ratio-mode 1))
#+end_src

No toolbar.
#+begin_src emacs-lisp
(tool-bar-mode -1) 
#+end_src


* Templates
** Enable easy templates (from [[https://emacs.stackexchange.com/a/46992][here]])
#+begin_src emacs-lisp 
(require 'org-tempo)
#+end_src

* Keybindings
** Personal

Lets keep `C-c d` for personal shortcuts.
#+begin_src emacs-lisp 
    (global-set-key (kbd "C-c d p") #'org-pomodoro)
    (global-set-key (kbd "C-c d g") #'org-gcal-post-at-point)
    (global-set-key (kbd "C-c d i") #'org-anki-sync-entry)
#+end_src

recompile.
#+begin_src emacs-lisp
(global-set-key (kbd "C-c c") 'recompile)
#+end_src

* Org

** Init

indent all org mode files
#+begin_src emacs-lisp
    (setq org-download-image-dir "images")
    (setq org-startup-indented t)
    (setq org-ellipsis "‚Ü™")
    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
    (setq org-refile-use-outline-path 'file)
    (setq org-directory "~/org-roam")
    (setq  org-download-image-dir (concat org-directory "/images"))

#+end_src

enable automated indent mode for org files
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

Disable done tasks in agenda view.
#+begin_src emacs-lisp
(setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-skip-deadline-if-done t)
#+end_src



done tasks get a [[https://github.com/lmintmate/emacs.d#strikethrough-for-done-tasks][strike through]]
#+begin_src emacs-lisp
(setq org-fontify-done-headline t)
(set-face-attribute 'org-done nil :foreground "PaleGreen" :strike-through t :weight 'bold)
(set-face-attribute 'org-headline-done nil :foreground "LightSalmon" :strike-through t)
#+end_src



#+begin_src emacs-lisp
  (use-package org-superstar :ensure t :hook (org-mode . (lambda () (org-superstar-mode 1))))
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
  
  (setq org-superstar-headline-bullets-list '("üÖê" "üÖë" "üÖí" "üÖì"  "üÖî"  "üÖï"  "üÖñ"))
  (setq org-superstar-special-todo-items t)
  (setq org-superstar-todo-bullet-alist '(("TODO" . ?‚ûΩ)
                                          ("CURRENTLY" . ?‚åõ)
                                          ("SOMEDAY" . ?‚è±)
                                          ("CANCELLED" . ?‚úò)
                                          ("DONE" . ?‚úì)))
#+end_src






** Capture templates


#+begin_src emacs-lisp
  (setq org-capture-templates
        `(
          ("l" "Log" entry
           (file+olp+datetree ,(concat org-directory "/log.org"))
           "* Entered on %U
                 %?
                 ")
          ("t" "TODO" entry
           (file+headline ,(concat org-directory "/inbox.org") "INBOX")
           "* TODO %?
                   %i
                   %a")
          ("h" "how do i" entry
           (file+headline ,(concat org-directory "/20200422070715_howdoi.org") "INBOX")
           "* %?
                   %i
                   %a")
          ("d" "Dailies")
          ("p" "potatr")
          ("pj" "Journal" entry
           (file+olp+datetree "~/Dropbox/orgmode/potatr.org" "Log")
           "* Entered on %U
                 %?
                 ")
          ("di" "Important thing daily" entry
           (file+olp+datetree ,(concat org-directory  "/important-things-daily-2022.org"))
           "* Entered on %U
      %?")

          ("dj" "Journal" entry
           (file+olp+datetree ,(concat org-directory "/personal-daily-2022.org"))
           "* Entered on %U
      %?")
          ("dc" "Daily Checkbox" entry
           (file+olp+datetree ,(concat org-directory "~/work-log-2021.org"))
           (file "~/Dropbox/orgmode/template-morning-work-checklist.org"))))



  (setq org-roam-dailies-capture-templates
        '(("d" "default" plain (file "~/Dropbox/orgmode/template-morning-work-checklist.org")
           :target (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n")
  :jump-to-captured

           )))
                    #+end_src

** Anki Capture
#+begin_src elisp

  (setq org-my-anki-file (concat org-directory "/anki.org"))
  (add-to-list 'org-capture-templates
               '("a" "Anki basic"
                 entry
                 (file+headline org-my-anki-file "INBOX")
                 "* %<%H:%M>   %^g\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Basic\n:ANKI_DECK: Mega\n:END:\n** Front\n%?\n** Back\n%x\n"))
  (add-to-list 'org-capture-templates
               '("A" "Anki cloze"
                 entry
                 (file+headline org-my-anki-file "INBOX")
                 "* %<%H:%M>   %^g\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Cloze\n:ANKI_DECK: Mega\n:END:\n** Text\n%x\n** Extra\n"))

#+end_src
** custom agenda

Create a custom agenda view.

#+begin_src emacs-lisp
(setq org-agenda-files (list org-directory 
                             (concat org-directory "/daily")))
#+end_src


Disable done tasks in agenda view.
#+begin_src emacs-lisp
(setq org-agenda-skip-scheduled-if-done t)
#+end_src
  
** custom agenda

Create a custom agenda view.


#+begin_src emacs-lisp
 (setq org-agenda-custom-commands
   '(("D" "Overview for today"
      ((tags-todo "WORK:URGENT"
                  ((org-agenda-overriding-header "Urgent Work")
                   (org-agenda-skip-function 'org-agenda-skip-if-scheduled-later)))
       (tags-todo "WORK:IMPORTANT"
                  ((org-agenda-overriding-header "Important Work")
                   (org-agenda-skip-function 'org-agenda-skip-if-scheduled-later)))
       (tags-todo "-WORK:URGENT"
                  ((org-agenda-overriding-header "Mine Urgent")
                   (org-agenda-skip-function 'org-agenda-skip-if-scheduled-later)))
       (tags-todo "-WORK:IMPORTANT"
                  ((org-agenda-overriding-header "Mine Important")
                   (org-agenda-skip-function 'org-agenda-skip-if-scheduled-later)))
       (agenda ""
               ((org-agenda-overriding-header "Today")
                (org-agenda-span 1)
                (org-agenda-sorting-strategy
                 '(time-up priority-down))))))
     ("R" "Review projects" tags-todo "-CANCELLED/"
      ((org-agenda-overriding-header "Reviews Scheduled")
       (org-agenda-skip-function 'org-review-agenda-skip)
       (org-agenda-cmp-user-defined 'org-review-compare)
       (org-agenda-sorting-strategy
        '(user-defined-down))))
     ("z" "zeemo"
      ((todo "TODO"
             (org-agenda-skip-entry-if -TIMESTAMP={\.}/! | +TIMESTAMP<<today>))))
     ("n" "Agenda and all TODOs"
      ((agenda "" nil)
       (alltodo "" nil))
      nil)))
#+end_src

**** Custom org functions
#+begin_src emacs-lisp
(defun org-agenda-skip-if-scheduled-later ()
"If this function returns nil, the current match should not be skipped.
Otherwise, the function must return a position from where the search
should be continued."
  (ignore-errors
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (scheduled-seconds
            (time-to-seconds
              (org-time-string-to-time
                (org-entry-get nil "SCHEDULED"))))
          (now (time-to-seconds (current-time))))
       (and scheduled-seconds
            (>= scheduled-seconds now)
            subtree-end))))
#+end_src


** Other
Fancy TODO states
#+begin_src emacs-lisp 
(setq org-todo-keywords '((sequence "TODO(t)" "|" "DONE(d)") (sequence "WAITING(w)" "|") (sequence "|" "CANCELED(c)")))
#+end_src

#+begin_src emacs-lisp
  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("NEXT" :foreground "blue" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold)
                ("MEETING" :foreground "forest green" :weight bold)
                ("PHONE" :foreground "forest green" :weight bold))))
  
  
  ; highlight the current task in agenda mode
(add-hook 'org-agenda-mode-hook '(lambda ()
                                   (hl-line-mode 1)) 'append)
#+end_src
** Shortcuts
org-agenda everywhere.

#+begin_src emacs-lisp
(global-set-key "\C-ca" 'org-agenda)
#+end_src

* Modules
** Tabbar

Show a tabbar at the top of the screen.

#+begin_src emacs-lisp 
(use-package tabbar
:ensure t
:config (tabbar-mode 0)
)
#+end_src


#+begin_src emacs-lisp
(global-tab-line-mode 0)
#+end_src


#+begin_src emacs-lisp
  (use-package centaur-tabs :ensure t
  :demand
  :config
  (centaur-tabs-mode t)
  :bind
  ("C-<prior>" . centaur-tabs-backward)
  ("C-<next>" . centaur-tabs-forward))
#+end_src
** Treemacs
A file browser.

#+begin_src emacs-lisp 

 (use-package treemacs
    :ensure t
    :defer t
    :config
    (progn

      (setq treemacs-follow-after-init          t
            treemacs-width                      35
            treemacs-indentation                2
            treemacs-git-integration            t
            treemacs-collapse-dirs              3
            treemacs-silent-refresh             nil
            treemacs-change-root-without-asking nil
            treemacs-sorting                    'alphabetic-desc
            treemacs-show-hidden-files          t
            treemacs-never-persist              nil
            treemacs-is-never-other-window      nil
            treemacs-goto-tag-strategy          'refetch-index)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t))
    :bind
    (:map global-map
          ([f8]        . treemacs-toggle)
          ([f9]        . treemacs-projectile-toggle)
          ("<C-M-tab>" . treemacs-toggle)
          ("M-0"       . treemacs-select-window)
          ("C-c 1"     . treemacs-delete-other-windows)
        ))


  (use-package treemacs-projectile
    :defer t
    :ensure t
    :config
    (setq treemacs-header-function #'treemacs-projectile-create-header)
    )



#+end_src

** Projectile

#+begin_src emacs-lisp 
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (setq projectile-project-search-path '("~/workspace/" "~/workspace/github" ("~/Exercism/emacs-lisp/" . 1)))
#+end_src

** Random
#+begin_src emacs-lisp
(use-package org-download :ensure t )
#+end_src

fzf support
#+begin_src emacs-lisp 
(use-package fzf :ensure t)
#+end_src

#+begin_src emacs-lisp 
(use-package all-the-icons 
:ensure t
:defer 0.5)
#+end_src

[[https://github.com/gregsexton/origami.el/tree/e558710a975e8511b9386edc81cd6bdd0a5bda74][Fancy text folding]]
#+begin_src emacs-lisp 
(use-package origami
:ensure t)
#+end_src

Highlight current line
#+begin_src emacs-lisp 
(use-package beacon
:ensure t
:config
(beacon-mode 1))
#+end_src


#+begin_src emacs-lisp 
(use-package color-theme-modern
  :ensure t)

#+end_src

WhichKey
#+begin_src emacs-lisp 

(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+end_src


dimmer, highlight current buffer
#+begin_src emacs-lisp 
(use-package dimmer
  :ensure t
  :config
   (dimmer-configure-which-key)
   (dimmer-configure-helm)
   (dimmer-mode t))
#+end_src

org-roam
#+begin_src emacs-lisp 
    ;; keybindings for org-roam
  
  
    (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename "~/org-roam"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ("C-c n t" . org-roam-dailies-find-today)
           ("C-c n y" . org-roam-dailies-find-yesterday)
           ("C-c n n" . org-roam-dailies-find-tomorrow) 
           ;; Dailies
  )
    :config
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol))
  (setq org-roam-db-node-include-function
      (lambda ()
        (not (member "DO_NOT_ORG_ROAM" (org-get-tags)))))
#+end_src


org-roam-ui
#+begin_src emacs-lisp
    (use-package org-roam-ui
      :ensure t
      :after org-roam
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  ;;  :hook (after-init . org-roam-ui-mode)
      :config
      (setq org-roam-ui-sync-theme t
            org-roam-ui-follow t
            org-roam-ui-update-on-save t
            org-roam-ui-open-on-start t)
            (run-with-idle-timer 10 nil (lambda () org-roam-ui-mode))
  )
#+end_src

helm

#+begin_src emacs-lisp 
(use-package helm
  :ensure t
  :config
(global-set-key (kbd "M-x") #'helm-M-x)
(global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
(global-set-key (kbd "C-x C-f") #'helm-find-files)
(helm-mode 1))
#+end_src

python

#+begin_src emacs-lisp 
(use-package elpy
  :ensure t
  :config
(elpy-enable)) ;; enable python support

;; Enable Flycheck
(when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))

;; python formatter
(use-package blacken :ensure t)
(use-package dap-mode :ensure t)
;(use-package dap-ui :ensure t)
;(use-package dap-python :ensure t :config (dap-mode 1) (dap-ui-mode 1))
#+end_src

https://github.com/zk-phi/indent-guide
show vertical lines to guide indentation
#+begin_src emacs-lisp
  (use-package indent-guide
    :ensure t
    :config
    (indent-guide-global-mode))
#+end_src

[[https://github.com/jacktasia/dumb-jump#obsolete-commands-and-options][Dumb jump]]
Note, that this disables etags.

Use `C-M g` to jump.

#+begin_src emacs-lisp
  (use-package dumb-jump
     :ensure t
     :config
      (setq xref-backend-functions (remq 'etags--xref-backend xref-backend-functions))
       (add-to-list 'xref-backend-functions #'dumb-jump-xref-activate t))
#+end_src

[[https://github.com/emacsorphanage/helm-ag][helm-ag]]
#+begin_src emacs-lisp
  (use-package helm-ag
     :ensure t)
   
#+end_src


[[https://melpa.org/#/no-littering][no-literring!]]
#+begin_src emacs-lisp
;(use-package no-littering :ensure t)
#+end_src

#+begin_src emacs-lisp
(use-package emojify :ensure t
  :hook (after-init . global-emojify-mode))
#+end_src


[[https://melpa.org/#/expand-region][expand-region]], intelligently adjust selection
#+begin_src emacs-lisp
(use-package expand-region :ensure t :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+end_src

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))
#+end_src


Fuzzy? matching. ~org refi~, matches ~org-refile~ and ~org-agenda-refile~
#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :custom (completion-styles '(orderless)))
#+end_src


#+begin_src emacs-lisp
(defun org-add-my-extra-fonts ()
  "Add extra fonts."
  (add-to-list 'org-font-lock-extra-keywords '("\\(!\\)\\([^\n\r\t]+?\\)\\(!\\)" (1 '(face highlight invisible t)) (2 'highlight t) (3 '(face highlight invisible t))) t))

(add-hook 'org-font-lock-set-keywords-hook #'org-add-my-extra-fonts)

; highlighting https://www.gonsie.com/blorg/org-highlight.html
(defun my-html-mark-tag (text backend info)
  "Transcode :blah: into <mark>blah</mark> in body text."
  (when (org-export-derived-backend-p backend 'html)
    (let ((text (replace-regexp-in-string "\\(!\\)\\([^\n\r\t]+?\\)\\(!\\)" "<mark>"  text nil nil 1 nil)))
      (replace-regexp-in-string "\\(<mark>\\)\\([^\n\r\t]+?\\)\\(!\\)" "</mark>" text nil nil 3 nil))))

; TODO
;(add-to-list 'org-export-filter-plain-text-functions 'my-html-mark-tag)

 #+end_src
 ** ox-hugo
 #+begin_src elisp
    (use-package ox-hugo
      :ensure t
      :config
        (use-package ox-hugo
      :ensure t
      :config
      ))
 #+end_src

 ** js2 (TypeScript refactoring)
 #+begin_src elisp
   ;; (use-package js2-refactor
   ;;   :ensure t
   ;;   :config
   ;;   (add-hook 'js2-mode-hook #'js2-refactor-mode)
   ;;   (js2r-add-keybindings-with-prefix "C-c C-m")
   ;;   )

 #+end_src


 ** Mocha (JS testing support)
 #+begin_src elisp
   (use-package mocha
     :ensure t)

 #+end_src

 ** Evil Mode üòà
 #+begin_src elisp
   (use-package evil
     :ensure t
     :config
     (require 'evil)
     (evil-mode 1)
     )
   
   (evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
 #+end_src

 ** Pretty links
 #+begin_src elisp
   ; (use-package org-link-beautify
   ;   :ensure t
   ;   :config
   ;   (org-link-beautify-mode 0)
   ;   )
 #+end_src

 ** Tide (Typescript interactive development environment for mac)

 #+begin_src elisp
   ;; (use-package tide
   ;;   :ensure t
   ;;   :after (typescript-mode company flycheck)
   ;;   :hook ((typescript-mode . tide-setup)
   ;;          (typescript-mode . tide-hl-identifier-mode)
   ;;          (before-save . tide-format-before-save)))

   ;; (use-package typescript-mode
   ;;   :ensure t
   ;;   :config
   ;;   (require 'ansi-color) ;; clean up compiler output from tsc
   ;;   (defun colorize-compilation-buffer ()
   ;;     (ansi-color-apply-on-region compilation-filter-start (point-max)))
   ;;   (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
   ;;   )
 #+end_src



 ** LSP Mode
#+begin_src elisp
    (use-package lsp-mode
  :ensure t
      :init
      ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
      (setq lsp-keymap-prefix "C-c l")
      :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
             (typescript-mode . lsp)
             ;; if you want which-key integration
             (lsp-mode . lsp-enable-which-key-integration))
      :commands lsp)

    ;; optionally
    (use-package lsp-ui :ensure t :commands lsp-ui-mode)
    ;; if you are helm user
    (use-package helm-lsp :ensure t :commands helm-lsp-workspace-symbol)
    ;; if you are ivy user
    (use-package lsp-treemacs :ensure t :commands lsp-treemacs-errors-list)

    ;; optionally if you want to use debugger
  ;  (use-package dap-mode :ensure t)
   ; (use-package dap-typescript :ensure t) 

    ;; optional if you want which-key integration
    (use-package which-key
        :config
        (which-key-mode))


#+end_src
** Color in terminal (like M-x compile)
#+begin_src elisp
  (use-package xterm-color :ensure t
    :config
    (require 'xterm-color)
    (setq compilation-environment '("TERM=xterm-256color"))
    (defun my/advice-compilation-filter (f proc string)
      (funcall f proc (xterm-color-filter string)))
    (advice-add 'compilation-filter :around #'my/advice-compilation-filter))
#+end_src

** Compile mode improvements
From [[https://massimilianomirra.com/notes/lightweight-external-command-integration-in-emacs-via-compilation-mode/][here]].
#+begin_src emacs-lisp
  (setq compilation-scroll-output 'first-error)
  (setq scroll-conservatively 101)
#+end_src
** Anki
#+begin_src elisp
  (use-package anki-editor
    :ensure t
    :config
    ; I like making decks
    (setq anki-editor-create-decks 't))
    (customize-set-variable 'org-anki-default-deck "Mega::org-anki")
#+end_src
** Gcal
#+begin_src elisp
  (use-package org-gcal
    :ensure t
    :after org
    :config
    (setq org-gcal-header-alist '(("dmitrym@gmail.com" . "#+PROPERTY: TIMELINE_FACE \"pink\"\n"))
          org-gcal-file-alist '(("dmitrym@gmail.com" .  "~/Dropbox/orgmode/gcal.org"))
          org-gcal-auto-archive nil
          org-gcal-notify-p nil))

    ;(add-hook 'org-agenda-mode-hook 'org-gcal-fetch)
    ;(add-hook 'org-capture-after-finalize-hook 'org-gcal-fetch))

#+end_src
** Org-capture-popout frame
#+begin_src emacs-lisp
  (load-file "~/.emacs.d/extra/capture.el")
#+end_src
** 
** Company mode (autocompletion)
#+begin_src elisp
  (use-package company
  :ensure t
  :bind (:map company-active-map
         ("C-n" . company-select-next)
         ("C-p" . company-select-previous))
  :config
  (setq company-idle-delay 0.3)
  (global-company-mode t))

#+end_src
** [[https://github.com/alphapapa/ts.el][ts.el]] (time manipulation)
#+begin_src elisp
   (use-package ts :ensure t)

 
#+end_src

* Last 
Start maximized
** TODO There's some issue with this; probably due to the order of operations?
#+begin_src emacs-lisp
  (add-hook 'window-setup-hook 'toggle-frame-maximized t)
  (toggle-frame-maximized)
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))
  
#+end_src


** start server
#+begin_src emacs-lisp
  ;(unless (server-running-p)
  ;(server-start))
#+end_src

** misc
#+begin_src emacs-lisp
(add-hook 'org-after-todo-state-change-hook (lambda () (run-with-idle-timer 20 nil (lambda () (load-file "/Users/dmitry/workspace/github/agenda-html/agenda-html.el")))))
#+end_src

* Custom LISP
** pomodoro support
#+begin_src emacs-lisp
  (defun jx/produce-pomodoro-string-for-menu-bar ()
  "Produce the string for the current pomodoro counter to display on the menu bar"
  (let ((prefix (cl-case org-pomodoro-state
            (:pomodoro "P")
            (:overtime "O")
            (:short-break "B")
            (:long-break "LB"))))
          (if (and (org-pomodoro-active-p) (> (length prefix) 0))
            (list prefix (org-pomodoro-format-seconds)) "N/A")))
#+end_src
