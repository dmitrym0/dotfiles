:PROPERTIES:
:ID:       1859DDBD-1924-4A25-910F-4DBD4965B8CB
:END:
#+TITLE: DotConfig


* Intro

My emacs init file.


** Don't forget

- ~C-c C-,~ invokes Emacs templating system.


** Still needs doing:

- Change highlight color. Selecting with a mouse or ~C-SPC~ I can't see the highlight.



* Paths

#+begin_src elisp
  (setq user-emacs-directory "~/.emacs.d")
  (setq org-directory "~/org-roam")
#+end_src

Preserve desktop

#+begin_src emacs-lisp
  (setq desktop-lazy-idle-delay 25)
  (setq desktop-restore-eager 5)
  (desktop-save-mode 1)
  (setq desktop-path (list user-emacs-directory))
  ;;(setq desktop-path `(,(concat user-emacs-directory ".cache/")))
#+end_src


* MELPA
#+begin_src emacs-lisp


  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/") t)
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
  (push (expand-file-name "extra" user-emacs-directory) load-path)
  (push (expand-file-name "./elpa/project-0.8.1") load-path)
  (use-package projectile :ensure t)
  (use-package wakatime-mode :ensure t)
;	(use-package org-roam-timestamps :ensure t)
#+end_src

Move customization variables to a separate file and load it
#+begin_src elisp
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file)
#+end_src


* Init
soft wrap lines (wrap around past screen boundary)
#+begin_src emacs-lisp
    (global-visual-line-mode 1)
    (show-paren-mode 1)
    (setq show-paren-delay 0)
    (winner-mode 1)
    (use-package org-pomodoro :ensure t)
  (setq mac-option-modifier 'meta)

  (setq org-hyperscheduler-readonly-mode nil)


 ;; save all org buffers
  (add-hook 'auto-save-hook 'org-save-all-org-buffers)
#+end_src



I never want whitespace at the end of lines. Remove it on save.

#+begin_src elisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

highlight current line
#+begin_src emacs-lisp
  (defface dm/hl-line-face
    '((default :extend t)
      (((class color) (min-colors 88) (background light))
       :background "#fff29a")
      (((class color) (min-colors 88) (background dark))
       :background "#513a3a")
      (t :inverse-video t))
    "Alternative yellow face for `pulsar-face'."
    :group 'pulsar-faces)

  (setq hl-line-face 'dm/hl-line-face)

  (global-hl-line-mode t)
#+end_src

Ensure that files are reloaded from disk (when switching branches, or from dropbox sync)
#+begin_src emacs-lisp
(use-package activity-watch-mode :ensure t)
    (global-auto-revert-mode 1)
    (setq auto-revert-interval 1
            ring-bell-function 'ignore
            scroll-margin 1 ; Space between cursor and top/bottom
        )


      (fset 'yes-or-no-p 'y-or-n-p)

  (global-activity-watch-mode t)
  (setq use-package-compute-statistics t)

#+end_src


#+begin_src elisp
  ;; Show a message when garbage collection happens? Useful while tuning the GC
  (setq garbage-collection-messages nil)

  ;; Temporarily set a high value of 256 MB to trigger less garbage collections
  ;; during initialization. The Emacs default is a threshold of 800 KB
  (setq gc-cons-threshold (* 256 1000000))

  ;; Then lower the threshold to 4 MB during normal operation to prevent longer
  ;; GC pauses, but still have it at a higher value than the default to
  ;; experience less mini-interruptions ‚Äì eg. while scrolling larger buffers.
  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold (* 4 1000000))))


  (add-function :after
                after-focus-change-function
                (lambda () (unless (frame-focus-state)
                             (garbage-collect))))

#+end_src


Store autosaves elsewhere, borrowed from [[https://github.com/larstvei/dot-emacs][here]]
#+begin_src emacs-lisp
(defvar emacs-autosave-directory
  (concat user-emacs-directory "autosaves/")
  "This variable dictates where to put auto saves. It is set to a
  directory called autosaves located wherever your .emacs.d/ is
  located.")

;; Sets all files to be backed up and auto saved in a single directory.
(setq backup-directory-alist
      `((".*" . ,emacs-autosave-directory))
      auto-save-file-name-transforms
      `((".*" ,emacs-autosave-directory t)))
#+end_src


turn on variable syntax highlighting
#+begin_src emacs-lisp
(use-package color-identifiers-mode :ensure t)
(add-hook 'after-init-hook 'global-color-identifiers-mode)
#+end_src

no startup message
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src

disable lockfiles
#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src


show column numbers in the mode line
#+begin_src emacs-lisp
(column-number-mode)
#+end_src

show trailing whitespaces, kinda makes emacs ugly.
#+begin_src emacs-lisp
  (setq-default show-trailing-whitespace t)
  (setq-default indicate-empty-lines t)
#+end_src
No tabs!
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src


Highlight everything between two exclamation marks (!highlighted!)
#+begin_src emacs-lisp
    ;; (defun org-add-my-extra-markup ()
    ;;   "Add highlight emphasis."
    ;;   (add-to-list 'org-font-lock-extra-keywords
    ;;                '("[^\\w]\\(:\\[^\n\r\t]+:\\)[^\\w]"
    ;;                  (1 '(face highlight invisible nil)))))
    ;; (add-hook 'org-font-lock-set-keywords-hook #'org-add-my-extra-markup)



    ;; ;; (defun my-html-mark-tag (text backend info)
    ;; ;; "Transcode :blah: into <mark>blah</mark> in body text."
    ;; ;; (when (org-export-derived-backend-p backend 'html)
    ;; ;;   (let ((text (replace-regexp-in-string "[^\\w]\\(:\\)[^\n\t\r]+\\(:\\)[^\\w]" "<mark>"  text nil nil 1 nil)))
    ;; ;;     (replace-regexp-in-string "[^\\w]\\(<mark>\\)[^\n\t\r]+\\(:\\)[^\\w]" "</mark>" text nil nil 2 nil))))

 ; (add-to-list 'org-export-filter-plain-text-functions 'my-html-mark-tag) ;
#+end_src


enable wakatime
#+begin_src elisp
  (global-wakatime-mode)
#+end_src

When we switch windows or scroll, for example, we get a wave of light near the cursor.
#+begin_src emacs-lisp
#+end_src


Use dome modeline
#+begin_src emacs-lisp
  (use-package doom-modeline :diminish :ensure t
    :config (doom-modeline-mode 1)
    ;; Whether to use hud instead of default bar. It's only respected in GUI.
    (setq doom-modeline-hud nil)
    (winner-mode 1))

#+end_src


#+begin_src emacs-lisp
  (use-package golden-ratio
    :ensure t
    :diminish golden-ratio-mode
    :init (golden-ratio-mode 1))
#+end_src

No toolbar.
#+begin_src emacs-lisp
;(tool-bar-mode -1)
#+end_src


* Templates
** Enable easy templates (from [[https://emacs.stackexchange.com/a/46992][here]])
#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

* Keybindings
** Personal

Lets keep `C-c d` for personal shortcuts.
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c d p") #'org-pomodoro)
  (global-set-key (kbd "C-c d g") #'org-gcal-post-at-point)
  (global-set-key (kbd "C-c d i") #'org-anki-sync-entry)
  ;; lets schedule everything at 10am today.
  (global-set-key (kbd "C-c d r") #'dm/set-schedule-today-now)
  (global-set-key (kbd "C-c d s") #'dm/hydra-inbox-sweep/body)
  (global-set-key (kbd "C-c d l") #'dm/move-task-to-today-and-reset-schedule)

  (defun dm/set-schedule-today-now ()
    (interactive)
    (let* ((hour (+ (% (abs (random)) 7) 10))
    (timestamp (format "%s:00" hour)))
    (org-schedule "today" timestamp)))

#+end_src

recompile.
#+begin_src emacs-lisp
(global-set-key (kbd "C-c c") 'recompile)
#+end_src

* Org

** Init

indent all org mode files
#+begin_src emacs-lisp
  (setq org-startup-indented t)
  (setq org-ellipsis "‚Ü™")
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
  (setq org-refile-use-outline-path 'file)
  (setq org-download-image-dir (concat org-directory "/images"))
  (setq org-image-actual-width '(1.0))
  (setq org-download-heading-lvl nil) ; dont use headings when creating image names
  (setq org-download-screenshot-method "/opt/homebrew/bin/pngpaste %s")


#+end_src

enable automated indent mode for org files
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

Disable done tasks in agenda view.
#+begin_src emacs-lisp
(setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-skip-deadline-if-done t)
#+end_src



done tasks get a [[https://github.com/lmintmate/emacs.d#strikethrough-for-done-tasks][strike through]]
#+begin_src emacs-lisp
(setq org-fontify-done-headline t)
(set-face-attribute 'org-done nil :foreground "PaleGreen" :strike-through t :weight 'bold)
(set-face-attribute 'org-headline-done nil :foreground "LightSalmon" :strike-through t)
#+end_src



#+begin_src emacs-lisp
  (use-package org-superstar :ensure t :hook (org-mode . (lambda () (org-superstar-mode 1))))
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))

  (setq org-superstar-headline-bullets-list '("üÖê" "üÖë" "üÖí" "üÖì"  "üÖî"  "üÖï"  "üÖñ"))
  (setq org-superstar-special-todo-items t)
  (setq org-superstar-todo-bullet-alist '(("TODO" . ?‚ûΩ)
                                          ("CURRENTLY" . ?‚åõ)
                                          ("SOMEDAY" . ?‚è±)
                                          ("CANCELLED" . ?‚úò)
                                          ("DONE" . ?‚úì)))
#+end_src






** Capture templates


#+begin_src emacs-lisp
              (setq org-capture-templates
                    `(
                      ("l" "Log" entry
                       (file+olp+datetree ,(concat org-directory "/log.org"))
                       "* Entered on %U
                                           %?
                                           ")
                      ("t" "TODO" entry
                       (file+headline ,(concat org-directory "/inbox.org") "INBOX")
                       "* TODO %?")
                      ("h" "how do i" entry
                       (file+headline ,(concat org-directory "/20200422070715_howdoi.org") "INBOX")
                       "* %?
                                             %i
                                             %a")
            ("w" "new job" entry
                     (file+olp+datetree ,(concat org-directory "/post_vcatch_nj.org"))
                     "* %U
%?")
                      ("d" "Dailies")
                      ("p" "potatr")
                      ("pj" "Journal" entry
                       (file+olp+datetree "~/Dropbox/orgmode/potatr.org" "Log")
                       "* Entered on %U
                                           %?
                                           ")
                      ("di" "Important thing daily" entry
                       (file+olp+datetree ,(concat org-directory  "/important-things-daily-2022.org"))
                       "* Entered on %U
%?")

                      ("dj" "Journal" entry
                       (file+olp+datetree ,(concat org-directory "/personal-daily-2022.org"))
                       "* Entered on %U

  Prompt: %(dm/get-journaling-prompt)

%?")

                      ("dc" "Daily Checkbox" entry
                       (file+olp+datetree ,(concat org-directory "~/work-log-2021.org"))
                       (file "~/Dropbox/orgmode/template-morning-work-checklist.org"))))



              (setq org-roam-dailies-capture-templates
                    '(
            ;; ("d" "default" plain (file "~/Dropbox/orgmode/template-morning-work-checklist.org")
            ;;            :target (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n")
            ;;            :jump-to-captured
            ;;            )

                      ("d" "autogenerated" plain (function dm/template)
                       :target (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n")
                       :jump-to-captured t
                       )


                      ))


              (setq org-roam-capture-templates
                    '(("d" "default" plain "%?"
                       :target (file+head "${slug}.org"
                                          "#+title: ${title}\n")
                       :unnarrowed t)
                      ("b" "book" plain (file "~/Dropbox/orgmode/book-review-template.org")
                       :target (file+head "${slug}.org" "#+title: ${title}\n")
                       :jump-to-captured
                       ))


                    )

#+end_src





** custom agenda

Create a custom agenda view.

#+begin_src emacs-lisp
(setq org-agenda-files (list org-directory
                             (concat org-directory "/daily")))
#+end_src


Disable done tasks in agenda view.
#+begin_src emacs-lisp
(setq org-agenda-skip-scheduled-if-done t)
#+end_src

** custom agenda

Create a custom agenda view.


#+begin_src emacs-lisp

          (setq org-agenda-start-on-weekday 1)
          (setq calendar-week-start-day 1)

          (setq org-agenda-custom-commands
                '(("D" "Overview for today"
                   ((tags-todo "WORK:URGENT"
                               ((org-agenda-overriding-header "Urgent Work")
                                (org-agenda-skip-function 'org-agenda-skip-if-scheduled-later)))
                    (tags-todo "WORK:IMPORTANT"
                               ((org-agenda-overriding-header "Important Work")
                                (org-agenda-skip-function 'org-agenda-skip-if-run-with-idle-timerscheduled-later)))
                    (tags-todo "-WORK:URGENT"
                               ((org-agenda-overriding-header "Mine Urgent")
                                (org-agenda-skip-function 'org-agenda-skip-if-scheduled-later)))
                    (tags-todo "-WORK:IMPORTANT"
                               ((org-agenda-overriding-header "Mine Important")
                                (org-agenda-skip-function 'org-agenda-skip-if-scheduled-later)))
                    (agenda ""
                            ((org-agenda-overriding-header "Today")
                             (org-agenda-span 1)
                             (org-agenda-sorting-strategy
                              '(time-up priority-down))))))
                  ("R" "Review projects" tags-todo "-CANCELLED/"
                   ((org-agenda-overriding-header "Reviews Scheduled")
                    (org-agenda-skip-function 'dm/org-review-agenda-skip)
                    (org-agenda-cmp-user-defined 'org-review-compare)
                    (org-agenda-sorting-strategy
                     '(user-defined-down))))
                  ("n" "Agenda and all TODOs"
                   ((agenda "" nil)
                    (alltodo "" nil))
                   nil)

    ;-----

  ("N" "Notes" tags "NOTE"
                 ((org-agenda-overriding-header "Notes")
                  (org-tags-match-list-sublevels t)))
                ("h" "Habits" tags-todo "STYLE=\"habit\""
                 ((org-agenda-overriding-header "Habits")
                  (org-agenda-sorting-strategy
                   '(todo-state-down effort-up category-keep))))
                (" " "Agenda"
                 (
                      (tags-todo "-WORK:URGENT"
                             ((org-agenda-overriding-header "Mine Urgent")
                              (org-agenda-skip-function 'org-agenda-skip-if-scheduled-later)))
                  (tags-todo "-WORK:IMPORTANT"
                             ((org-agenda-overriding-header "Mine Important")
                              (org-agenda-skip-function 'org-agenda-skip-if-scheduled-later)))
                  (agenda ""
                          ((org-agenda-overriding-header "Today")
                           (org-agenda-span 1)
                           (org-agenda-sorting-strategy
                            '(time-up priority-down))))
                  (tags "REFILE"
                        ((org-agenda-overriding-header "Tasks to Refile")
                         (org-tags-match-list-sublevels nil)))
                  (tags-todo "-CANCELLED/!"
                             ((org-agenda-overriding-header "Stuck Projects")
                              (org-agenda-skip-function 'bh/skip-non-stuck-projects)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-CANCELLED/!NEXT"
                             ((org-agenda-overriding-header (concat "Project Next Tasks"
                                                                    (if bh/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including WAITING and SCHEDULED tasks)")))
                              (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                              (org-tags-match-list-sublevels t)
                              (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-sorting-strategy
                               '(todo-state-down effort-up category-keep))))
                  (tags-todo "-CANCELLED+WAITING|HOLD/!"
                             ((org-agenda-overriding-header (concat "Waiting and Postponed Tasks"
                                                                    (if bh/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including WAITING and SCHEDULED tasks)")))
                              (org-agenda-skip-function 'bh/skip-non-tasks)
                              (org-tags-match-list-sublevels nil)
                              (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)))
                 nil)))


    ;-----

    )
#+end_src

**** Custom org functions
#+begin_src emacs-lisp
(defun org-agenda-skip-if-scheduled-later ()
"If this function returns nil, the current match should not be skipped.
Otherwise, the function must return a position from where the search
should be continued."
  (ignore-errors
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (scheduled-seconds
            (time-to-seconds
              (org-time-string-to-time
                (org-entry-get nil "SCHEDULED"))))
          (now (time-to-seconds (current-time))))
       (and scheduled-seconds
            (>= scheduled-seconds now)
            subtree-end))))
#+end_src


** Other
Fancy TODO states
#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING")))


#+end_src

** Shortcuts
org-agenda everywhere.

#+begin_src emacs-lisp
(global-set-key "\C-ca" 'org-agenda)
#+end_src

* Modules
** Magit
#+begin_src elisp
(use-package magit :ensure t)
#+end_src

** straight.el
#+begin_src elisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src
** paredit
#+begin_src elisp
  (use-package paredit
  :ensure t
  :config
  ;(add-hook 'emacs-lisp-mode-hook #'paredit-mode)
  ;; enable in the *scratch* buffer
  ;(add-hook 'lisp-interaction-mode-hook #'paredit-mode)
  ;(add-hook 'ielm-mode-hook #'paredit-mode)
  ;(add-hook 'lisp-mode-hook #'paredit-mode)
  ;(add-hook 'eval-expression-minibuffer-setup-hook #'paredit-mode)
;  (diminish 'paredit-mode "()")
)

#+end_src
** Tabbar

Show a tabbar at the top of the screen.

#+begin_src emacs-lisp
  ;; (use-package tabbar
  ;; :ensure t
  ;; :config (tabbar-mode 0)
  ;; )
#+end_src


#+begin_src emacs-lisp
;(global-tab-line-mode 1)
#+end_src


#+begin_src emacs-lisp
  ;; (use-package centaur-tabs :ensure t
  ;; :demand
  ;; :config
  ;; (centaur-tabs-mode t)
  ;; :bind
  ;; ("C-<prior>" . centaur-tabs-backward)
  ;; ("C-<next>" . centaur-tabs-forward))
#+end_src
** Treemacs
A file browser.

#+begin_src emacs-lisp

  ;; (use-package treemacs
  ;;    :ensure t
  ;;    :defer t
  ;;    :config
  ;;    (progn

  ;;      (setq treemacs-follow-after-init          t
  ;;            treemacs-width                      35
  ;;            treemacs-indentation                2
  ;;            treemacs-git-integration            t
  ;;            treemacs-collapse-dirs              3
  ;;            treemacs-silent-refresh             nil
  ;;            treemacs-change-root-without-asking nil
  ;;            treemacs-sorting                    'alphabetic-desc
  ;;            treemacs-show-hidden-files          t
  ;;            treemacs-never-persist              nil
  ;;            treemacs-is-never-other-window      nil
  ;;            treemacs-goto-tag-strategy          'refetch-index)

  ;;      (treemacs-follow-mode t)
  ;;      (treemacs-filewatch-mode t))
  ;;    :bind
  ;;    (:map global-map
  ;;          ([f8]        . treemacs-toggle)
  ;;          ([f9]        . treemacs-projectile-toggle)
  ;;          ("<C-M-tab>" . treemacs-toggle)
  ;;          ("M-0"       . treemacs-select-window)
  ;;          ("C-c 1"     . treemacs-delete-other-windows)
  ;;        ))


  ;;  (use-package treemacs-projectile
  ;;    :defer t
  ;;    :ensure t
  ;;    :config
  ;;    (setq treemacs-header-function #'treemacs-projectile-create-header)
  ;;    )



#+end_src

** Projectile

#+begin_src emacs-lisp
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (setq projectile-project-search-path '("~/workspace/" "~/workspace/github" ("~/Exercism/emacs-lisp/" . 1)))
#+end_src

** Random
#+begin_src emacs-lisp
(use-package org-download :ensure t )
#+end_src

fzf support
#+begin_src emacs-lisp
;(use-package fzf :ensure t)
#+end_src

#+begin_src emacs-lisp
(use-package all-the-icons
:ensure t
:defer 0.5)
#+end_src

[[https://github.com/gregsexton/origami.el/tree/e558710a975e8511b9386edc81cd6bdd0a5bda74][Fancy text folding]]
#+begin_src emacs-lisp
;(use-package origami :ensure t)
#+end_src

#+begin_src emacs-lisp
(use-package color-theme-modern
  :ensure t)

#+end_src

WhichKey
#+begin_src emacs-lisp

(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+end_src


dimmer, highlight current buffer
#+begin_src emacs-lisp
  (use-package dimmer
    :ensure t
    :config
(setq dimmer-adjustment-mode :both)
     (dimmer-configure-which-key)
  ;   (dimmer-configure-helm)
     (dimmer-mode t))
#+end_src

org-roam
#+begin_src emacs-lisp
    ;; keybindings for org-roam


    (use-package org-roam
      :ensure t
      :custom
      (org-roam-directory (file-truename org-directory))
      :bind (("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ("C-c n g" . org-roam-graph)
             ("C-c n i" . org-roam-node-insert)
             ("C-c n I" . org-roam-node-insert-immediate)
             ("C-c n c" . org-roam-capture)
             ("C-c n t" . org-roam-dailies-goto-today)
             ("C-c n y" . org-roam-dailies-goto-previous-note)
             ("C-c n n" . org-roam-dailies-goto-tomorrow)
             ("C-c n u" . org-roam-ui-open)
             ;; Dailies
             )
      :config
      (org-roam-db-autosync-mode)
      ;; If using org-roam-protocol
      :init
      (require 'org-roam-protocol)
      (setq org-roam-db-node-include-function
            (lambda ()
              (not (member "DO_NOT_ORG_ROAM" (org-get-tags)))))
      )


#+end_src


org-roam-ui
#+begin_src emacs-lisp
    (use-package org-roam-ui
      :ensure t
      :after org-roam
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  ;;  :hook (after-init . org-roam-ui-mode)
      :config
      (setq org-roam-ui-sync-theme t
            org-roam-ui-follow nil
            org-roam-ui-update-on-save t
            org-roam-ui-open-on-start nil)
            (run-with-idle-timer 100 nil (lambda () org-roam-ui-mode))
  )


  ;; dont save for desktop.el
;;    (add-to-list 'desktop-minor-mode-table
 ;;              '(org-roam-ui-mode nil))
  ;;(add-to-list 'desktop-minor-mode-table
   ;;            '(org-roam-ui-follow-mode nil))
#+end_src

helm

#+begin_src emacs-lisp
   (use-package helm
     :ensure t
     :config
   (global-set-key (kbd "M-x") #'helm-M-x)
   (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
   (global-set-key (kbd "C-x C-f") #'helm-find-files)
  (helm-mode 1)
  )
#+end_src

python

#+begin_src emacs-lisp
(use-package elpy
  :ensure t
  :config
(elpy-enable)) ;; enable python support

;; Enable Flycheck
(when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))

;; python formatter
(use-package blacken :ensure t)
(use-package dap-mode :ensure t)
;(use-package dap-ui :ensure t)
;(use-package dap-python :ensure t :config (dap-mode 1) (dap-ui-mode 1))
#+end_src

https://github.com/zk-phi/indent-guide
show vertical lines to guide indentation
#+begin_src emacs-lisp
  ;; (use-package indent-guide
  ;;   :ensure t
  ;;   :config
  ;;   (indent-guide-global-mode))
#+end_src

[[https://github.com/jacktasia/dumb-jump#obsolete-commands-and-options][Dumb jump]]
Note, that this disables etags.

Use `C-M g` to jump.

#+begin_src emacs-lisp
  (use-package dumb-jump
     :ensure t
     :config
      (setq xref-backend-functions (remq 'etags--xref-backend xref-backend-functions))
       (add-to-list 'xref-backend-functions #'dumb-jump-xref-activate t))
#+end_src


git-auto-commit-mode

track every change in git.
#+begin_src emacs-lisp
    (use-package git-auto-commit-mode :ensure t)

#+end_src

[[https://github.com/emacsorphanage/helm-ag][helm-ag]]
#+begin_src emacs-lisp
  (use-package helm-ag
     :ensure t)
#+end_src


#+begin_src emacs-lisp
(use-package emojify :ensure t
  :hook (after-init . global-emojify-mode))
#+end_src

[[https://melpa.org/#/expand-region][expand-region]], intelligently adjust selection
#+begin_src emacs-lisp
(use-package expand-region :ensure t :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+end_src

Fuzzy? matching. ~org refi~, matches ~org-refile~ and ~org-agenda-refile~
#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :custom (completion-styles '(orderless)))
#+end_src


#+begin_src emacs-lisp
(defun org-add-my-extra-fonts ()
  "Add extra fonts."
  (add-to-list 'org-font-lock-extra-keywords '("\\(!\\)\\([^\n\r\t]+?\\)\\(!\\)" (1 '(face highlight invisible t)) (2 'highlight t) (3 '(face highlight invisible t))) t))

(add-hook 'org-font-lock-set-keywords-hook #'org-add-my-extra-fonts)

; highlighting https://www.gonsie.com/blorg/org-highlight.html
(defun my-html-mark-tag (text backend info)
  "Transcode :blah: into <mark>blah</mark> in body text."
  (when (org-export-derived-backend-p backend 'html)
    (let ((text (replace-regexp-in-string "\\(!\\)\\([^\n\r\t]+?\\)\\(!\\)" "<mark>"  text nil nil 1 nil)))
      (replace-regexp-in-string "\\(<mark>\\)\\([^\n\r\t]+?\\)\\(!\\)" "</mark>" text nil nil 3 nil))))

; TODO it looks like it's not available during load. need to arrange it in correct order.
;(add-to-list 'org-export-filter-plain-text-functions 'my-html-mark-tag)

 #+end_src
** ox-hugo
 #+begin_src elisp
    (use-package ox-hugo
      :ensure t
      :config
        (use-package ox-hugo
      :ensure t
      :config
      ))
 #+end_src

** js2 (TypeScript refactoring)
 #+begin_src elisp
   ;; (use-package js2-refactor
   ;;   :ensure t
   ;;   :config
   ;;   (add-hook 'js2-mode-hook #'js2-refactor-mode)
   ;;   (js2r-add-keybindings-with-prefix "C-c C-m")
   ;;   )

 #+end_src


** Mocha (JS testing support)
 #+begin_src elisp
   (use-package mocha
     :ensure t)

 #+end_src


** Tide (Typescript interactive development environment for mac)

 #+begin_src elisp
   ;; (use-package tide
   ;;   :ensure t
   ;;   :after (typescript-mode company flycheck)
   ;;   :hook ((typescript-mode . tide-setup)
   ;;          (typescript-mode . tide-hl-identifier-mode)
   ;;          (before-save . tide-format-before-save)))

   ;; (use-package typescript-mode
   ;;   :ensure t
   ;;   :config
   ;;   (require 'ansi-color) ;; clean up compiler output from tsc
   ;;   (defun colorize-compilation-buffer ()
   ;;     (ansi-color-apply-on-region compilation-filter-start (point-max)))
   ;;   (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
   ;;   )
 #+end_src


*** More typescript support
#+begin_src elisp
(use-package typescript-mode
  :ensure t
  :init
  (define-derived-mode typescript-tsx-mode typescript-mode "tsx")
  :config
  (setq typescript-indent-level 2)
  (add-hook 'typescript-mode #'subword-mode)
  (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . typescript-tsx-mode)))

(use-package tree-sitter
  :ensure t
  :hook ((typescript-mode . tree-sitter-hl-mode)
	 (typescript-tsx-mode . tree-sitter-hl-mode)))

(use-package tree-sitter-langs
  :ensure t
  :after tree-sitter
  :config
  (tree-sitter-require 'tsx)
  (add-to-list 'tree-sitter-major-mode-language-alist '(typescript-tsx-mode . tsx)))

#+end_src

** LSP Mode
#+begin_src elisp
    (use-package lsp-mode
  :ensure t
      :init
      ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
      (setq lsp-keymap-prefix "C-c l")
      :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
             (typescript-mode . lsp)
             ;; if you want which-key integration
             (lsp-mode . lsp-enable-which-key-integration))
      :commands lsp)

    ;; optionally
    (use-package lsp-ui :ensure t :commands lsp-ui-mode)
    ;; if you are helm user
    (use-package helm-lsp :ensure t :commands helm-lsp-workspace-symbol)
    ;; if you are ivy user
    (use-package lsp-treemacs :ensure t :commands lsp-treemacs-errors-list)

    ;; optionally if you want to use debugger
  ;  (use-package dap-mode :ensure t)
   ; (use-package dap-typescript :ensure t)

    ;; optional if you want which-key integration
    (use-package which-key
        :config
        (which-key-mode))


#+end_src
** Color in terminal (like M-x compile)
#+begin_src elisp
  (use-package xterm-color :ensure t
    :config
    (require 'xterm-color)
    (setq compilation-environment '("TERM=xterm-256color"))
    (defun my/advice-compilation-filter (f proc string)
      (funcall f proc (xterm-color-filter string)))
    (advice-add 'compilation-filter :around #'my/advice-compilation-filter))
#+end_src

** Compile mode improvements
From [[https://massimilianomirra.com/notes/lightweight-external-command-integration-in-emacs-via-compilation-mode/][here]].
#+begin_src emacs-lisp
  (setq compilation-scroll-output 'first-error)
  (setq scroll-conservatively 101)
#+end_src
** Ankiorg-
#+begin_src elisp
  (use-package anki-editor
    :ensure t
    :config
    ; I like making decks
    (setq anki-editor-create-decks 't))
    (customize-set-variable 'org-anki-default-deck "Mega::org-anki")
#+end_src
** Gcal
#+begin_src elisp
  (use-package org-gcal
    :ensure t
    :after org
    :config
    (setq org-gcal-header-alist '(("dmitrym@gmail.com" . "#+PROPERTY: TIMELINE_FACE \"pink\"\n"))
          org-gcal-file-alist `(("dmitrym@gmail.com" .  ,(concat org-directory "/gcal.org")))
          org-gcal-auto-archive nil
          org-gcal-notify-p nil))

                                          ;(add-hook 'org-agenda-mode-hook 'org-gcal-fetch)
                                          ;(add-hook 'org-capture-after-finalize-hook 'org-gcal-fetch))

#+end_src
** Org-capture-popout frame
#+begin_src emacs-lisp
  (load-file "~/.emacs.d/extra/capture.el")
  (load-file "~/.emacs.d/extra/org-project.el")
#+end_src

** Company mode (autocompletion)
#+begin_src elisp
  (use-package company
  :ensure t
  :bind (:map company-active-map
         ("C-n" . company-select-next)
         ("C-p" . company-select-previous))
  :config
  (setq company-idle-delay 0.3)
  (global-company-mode t))

#+end_src
** [[https://github.com/alphapapa/ts.el][ts.el]] (time manipulation)
#+begin_src elisp
   (use-package ts :ensure t)


#+end_src

** dark room
#+begin_src
  (use-package darkroom :ensure t)
#+end_src

** raindbow delimeters
#+begin_src elisp
  (use-package rainbow-delimiters :ensure t
    :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
           (clojure-mode . rainbow-delimiters-mode))
    )
#+end_src

#+begin_src elisp
  (use-package org-anki :ensure t)
#+end_src
** [[https://github.com/publicimageltd/delve][delve]]

]#+begin_src elisp
 #  (use-package delve :ensure t
 #  :straight (:repo "publicimageltd/delve"
 #             :host github
 #             :type git)
 #  ;;:bind
 #  ;; the main entry point, offering a list of all stored collections
 #  ;; and of all open Delve buffers:
 #  ;;(("<f12>" . delve))
 #  :config
 #  ;; set meaningful tag names for the dashboard query
 #  ;;(setq delve-dashboard-tags '("Tag1" "Tag2"))
 # ;; turn on delve-minor-mode when org roam file is opened:
 #  (delve-global-minor-mode))
#+end_src


** roam timestamps
#+begin_src elisp

  ;; (use-package org-roam-timestamps
  ;;   :after org-roam
  ;;   :config (org-roam-timestamps-mode) (setq org-roam-timestamps-remember-timestamps t))

#+end_src

** org-pomodoro-third-time
#+begin_src elisp
    (use-package org-pomodoro-third-time :ensure t :init (org-pomodoro-third-time-mode +1)
  :straight (:repo "telotortium/org-pomodoro-third-time"
             :host github
             :type git))


#+end_src


** PlantUML
#+begin_src elisp
  ;;  (use-package plantuml-mode :ensure t :init (setq plantuml-executable-path "/opt/homebrew/bin/plantuml" plantuml-default-exec-mode 'executable) :mode (("\\.plantuml\\'" . plantuml-mode)))

  (use-package plantuml-mode :ensure t :init
    ;; Sample executable configuration
    ;; this is for org  mode export
    (setq org-plantuml-executable-path "/opt/homebrew/bin/plantuml")
    (setq org-plantuml-exec-mode 'plantuml)

  ;; this is for the majhor mode :facepalm
    (setq plantuml-executable-path "/opt/homebrew/bin/plantuml")
    (setq plantuml-default-exec-mode 'executable)


    (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
    (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))
    (org-babel-do-load-languages 'org-babel-load-languages '((shell . t)))
    (setq org-confirm-babel-evaluate nil))


  ;; dont ask to evaluate blocks


#+end_src

* Last
Start maximized
** TODO There's some issue with this; probably due to the order of operations?
#+begin_src emacs-lisp
  (add-hook 'window-setup-hook 'toggle-frame-maximized t)
  (toggle-frame-maximized)
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))

#+end_src


** start server
#+begin_src emacs-lisp
  (server-start)
#+end_src

** misc
timer setup.
#+begin_src emacs-lisp

  (setq dmm-agenda-timer nil)
  (run-with-idle-timer (* 60 30) t (lambda () (org-gcal-sync)))
  (defun dm/set-timer ()
    (when dmm-agenda-timer (cancel-timer dmm-agenda-timer))
    (setq dmm-agenda-timer (run-with-idle-timer 20 nil (lambda () (load-file "~/workspace/github/agenda-html/agenda-html.el")))))
  (add-hook 'org-after-todo-state-change-hook 'dm/set-timer)
#+end_src

* Custom LISP
** pomodoro support
#+begin_src emacs-lisp
  (defun jx/produce-pomodoro-string-for-menu-bar ()
    "Produce the string for the current pomodoro counter to display on the menu bar"
    (let ((prefix (cl-case org-pomodoro-state
                    (:pomodoro "P")
                    (:overtime "O")
                    (:short-break "B")
                    (:long-break "LB"))))
      (if (and (org-pomodoro-active-p) (> (length prefix) 0))
          (list prefix (org-pomodoro-format-seconds)) "N/A")))



  (defun org-pomodoro-third-time-increment ()
    (org-pomodoro-third-time-end-in (floor ( / (+ (org-pomodoro-remaining-seconds) 300) 60))))


  (defun org-pomodoro-third-time-decrement ()
    (org-pomodoro-third-time-end-in (floor ( / (- (org-pomodoro-remaining-seconds) 300) 60))))


  (defun org-pomodoro-restart ()
    (org-pomodoro-kill)
    (org-pomodoro '(16)))
#+end_src

** bind immediate
#+begin_src elisp
  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (cons arg args))
          (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                    '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))
#+end_src



** time stamps in warnings
#+begin_src elisp
  ;;   (defun sh/current-time-microseconds ()
  ;;   "Return the current time formatted to include microseconds."
  ;;   (let* ((nowtime (current-time))
  ;;          (now-ms (nth 2 nowtime)))
  ;;     (concat (format-time-string "[%Y-%m-%dT%T" nowtime) (format ".%d]" now-ms))))

  ;; (defun sh/ad-timestamp-message (FORMAT-STRING &rest args)
  ;;   "Advice to run before `message' that prepends a timestamp to each message.

  ;; ;; Activate this advice with:
  ;; ;; (advice-add 'message :before 'sh/ad-timestamp-message)"
  ;;   (unless (string-equal FORMAT-STRING "%s%s")
  ;;     (let ((deactivate-mark nil)
  ;;           (inhibit-read-only t))
  ;;       (with-current-buffer "*Messages*"
  ;;         (goto-char (point-max))
  ;;         (if (not (bolp))
  ;;           (newline))
  ;;         (insert (sh/current-time-microseconds) " ")))))

  ;; (advice-add 'message :before 'sh/ad-timestamp-message)

#+end_src





* Testing

Always save M-x history even when it fails [[https://emacs.stackexchange.com/questions/45069/how-do-i-persist-m-x-calls-so-they-can-be-displayed-in-mru-order][source]].
Preserve M-x commands (MRU).

#+begin_quote elisp
(setq helm-M-x-always-save-history t)

#+end_quote

** From [[https://systemcrafters.net/emacs-from-scratch/the-best-default-settings/][source]] [2022-02-22 Tue]

Remember recent files,
#+begin_src elisp
(recentf-mode 1)
#+end_src

Remember minibuffer
#+begin_src elisp
  (setq history-length 25)
  (savehist-mode 1)
#+end_src


Remember and restore the last cursor location of opened files
#+begin_src elisp
  (save-place-mode 1)
#+end_src


* Auto revert
inotify is a linux feature; doesn't work on mac.

#+begin_src elisp
  (global-auto-revert-mode 1)
  (setq auto-revert-use-notify nil)
  (setq global-auto-revert-non-file-buffers nil)
#+end_src


** [2022-02-24 Thu]
*** [[https://github.com/nobiot/org-transclusion][org-transclusion]] include nodes from other files

Suggested keymappings:


(define-key global-map (kbd "<f12>") #'org-transclusion-add)
(define-key global-map (kbd "C-n t") #'org-transclusion-mode)


#+begin_src elisp
  (use-package org-transclusion :ensure t
  :after org)


  ;; dont include the first section since it's usually metadata
  (setq org-transclusion-include-first-section nil)
  (set-face-attribute
 'org-transclusion-fringe nil
 :foreground "green"
 :background "green")
#+end_src


*** export path for org-export/babel
[[http://rwx.io/posts/org-export-configurations/][source]]

#+begin_src elisp
  ;; (defvar org-export-output-directory-prefix "export_" "prefix of directory used for org-mode export")

  ;; (defadvice org-export-output-file-name (before org-add-export-dir activate)
  ;;   "Modifies org-export to place exported files in a different directory"
  ;;   (when (not pub-dir)
  ;;     (setq pub-dir (concat org-export-output-directory-prefix (substring extension 1)))
  ;;     (when (not (file-directory-p pub-dir))
  ;;       (make-directory pub-dir))))



  ;; (defun org-export-output-file-name-modified (orig-fun extension &optional subtreep pub-dir)
  ;;   (unless pub-dir
  ;;     (setq pub-dir "exported-org-files")
  ;;     (unless (file-directory-p pub-dir)
  ;;       (make-directory pub-dir)))
  ;;   (apply orig-fun extension subtreep pub-dir nil))
  ;; (advice-add 'org-export-output-file-name :around #'org-export-output-file-name-modified)
    #+end_src



#+begin_src elisp

  (require 'ox-publish)
  (setq org-publish-project-alist
        '(
          ("org-notes"
           :base-directory "~/Dropbox/orgmode/"
           :publishing-directory "~/export"
           :publishing-function org-md-publish-to-md
           )

          ("org-notes-1"
           :base-directory "~/org-roam/"
           :publishing-directory "~/export"
           :publishing-function org-md-publish-to-md
           )

          ("org-static"
           :base-extension "png"
           :base-directory "~/Dropbox/orgmode/"
           :publishing-directory "~/export"
           :publishing-function org-publish-attachment
           )

          ("org-static-1"
           :base-extension "png"
           :base-directory "~/org-roam/"
           :publishing-directory "~/export"
           :publishing-function org-publish-attachment
           )



          ("falcon-docs"
           :base-directory "~/org-roam/"
           :publishing-function org-md-publish-to-morg-md-publish-to-md
           :publishing-directory "~/org-roam/export/falcon"
           :exclude ".*"
           :include ["~/org-roam/falcon_environments.org" "~/org-roam/falcon_gateway_v1.org" "~/org-roam/falcon_changelog.org" "~/org-roam/falcon_v1_build_process.org" "~/org-roam/falcon_api.org" "~/org-roam/falcon_plugins.org"]
           )

          ("falcon-static"
           :base-extension "png"
           :base-directory "~/org-roam/falcon/"
           :publishing-directory "~/org-roam/export/falcon/falcon/"
           :publishing-function org-publish-attachment)


          ("org-project" :components ("org-notes" "org-static" "org-notes-1" "org-static-1"))
          ("falcon-project" :components ("falcon-docs" "falcon-static"))


          ))



#+end_src



** [2022-02-26 Sat]o

focus-autosave-mode, save all emacs buffers when emacs loses focus
#+begin_src elisp
  (use-package focus-autosave-mode :ensure t :init (focus-autosave-mode))


#+end_src

** [2022-03-03 Thu]
Load hyperscheduler locally and bind a key.


#+begin_src elisp
;  (push (expand-file-name "/Users/dmitry/workspace/org-hyperscheduler") load-path)
;  (require 'org-hyperscheduler)
#+end_src

#+begin_src elisp
  (use-package org-hyperscheduler
    :bind (("C-c d t" . org-hyperscheduler-open)
           ))
#+end_src



Nano emacs theme
#+begin_src elisp
;  (straight-use-package
;  '(nano-emacs :type git :host github :repo "rougier/nano-emacs"))
  ;(use-package nano)
; (use-package nano-theme-dark)
 ; (use-package nano-faces)
 ; (use-package nano)

#+end_src


** [2022-03-09 Wed]
blogging with ox-hugo
#+begin_src elisp
  (use-package ox-hugo
  :ensure t   ;Auto-install the package from Melpa
  :pin melpa  ;`package-archives' should already have ("melpa" . "https://melpa.org/packages/")
  :after ox)


  (with-eval-after-load 'ox-hugo
  (add-to-list 'org-hugo-special-block-type-properties '("raw" . (:raw t))))
#+end_src


** [2022-03-14 Mon]
#+begin_src elisp
  (setq mac-command-modifier 'super)
  (global-set-key (kbd "s-v") 'org-yank)
#+end_src


** [2022-03-14 Mon]
#+begin_src elisp
  ;; (use-package centaur-tabs
  ;; :ensure t
  ;; :hook
  ;; (dashboard-mode . centaur-tabs-local-mode)
  ;; (vterm-m/ode . centaur-tabs-local-mode)
  ;; (calendar-mode . centaur-tabs-local-mode)
  ;; (org-agenda-mode .ecentaur-tabs-local-mode)
  ;; (helpful-mode . centaur-tabs-local-mode)
  ;; (xwidget-webkit-mode . centaur-tabs-local-mode)
  ;; :config
  ;; (centaur-tabs-mode)
  ;; (centaur-tabs-headline-match)
  ;; (centaur-tabs-group-by-projectile-project)
  ;; (setq centaur-tabs-style "box"
  ;;               centaur-tabs-height 27
  ;;               centaur-tabs-gray-out-icons 'buffer
  ;;               centaur-tabs-set-modified-marker t
  ;;               centaur-tabs-show-navigation-buttons nil
  ;;               centaur-tabs-plain-icons t
  ;;               centaur-tabs-set-icons nil
  ;;               uniquify-buffer-name-style 'forward)
  ;; :bind
  ;; (setq centaur-tabs-set-icons nil))
#+end_src

#+begin_src elisp


#+end_src


#+begin_src elisp



  ;; Search files, and do it with speed and style
  (use-package swiper :ensure t
    :config
    (setq swiper-goto-start-of-match t))




  (use-package block-nav :ensure t
  :commands (block-nav-next-block block-nav-previous-block block-nav-next-indentation-level block-nav-previous-indentation-level)
  :bind
  ("C-c C-j" . block-nav-next-block)
  ("C-c C-k" . block-nav-previous-block)
  ("C-c C-l" . block-nav-next-indentation-level)
  ("C-c C-h" . block-nav-previous-indentation-level))
#+end_src






* [2022-03-15 Tue]

Take care of weird mac bindings in emacs-mac from [[https://gist.github.com/railwaycat/3498096][here]].


#+begin_src elisp
    ;; Keybonds
  (global-set-key [(hyper a)] 'mark-whole-buffer)
  (global-set-key [(hyper v)] 'yank)
  (global-set-key [(hyper c)] 'kill-ring-save)
  (global-set-key [(hyper s)] 'save-buffer)
  (global-set-key [(hyper l)] 'goto-line)
  (global-set-key [(hyper w)]
                  (lambda () (interactive) (delete-window)))
  (global-set-key [(hyper z)] 'undo)

  ;; mac switch meta key
  (defun mac-switch-meta nil
    "switch meta between Option and Command"
    (interactive)
    (if (eq mac-option-modifier nil)
        (progn
          (setq mac-option-modifier 'meta)
          (setq mac-command-modifier 'hyper)
          )
      (progn
        (setq mac-option-modifier nil)
        (setq mac-command-modifier 'meta)
        )
      )
    )


  ;; facepalm

  (mac-switch-meta)
  (mac-switch-meta)
#+end_src






** [2022-03-16 Wed]
[[https://protesilaos.com/emacs/pulsar#h:96289426-8480-4ea6-9053-280348adc0ed][Pulsar]] highlights where the cursor is.

#+begin_src elisp
(defface dm/pulsar-yellow
  '((default :extend t)
    (((class color) (min-colors 88) (background light))
     :background "#fff29a")
    (((class color) (min-colors 88) (background dark))
     :background "#FFFF00")
    (t :inverse-video t))
  "Alternative yellow face for `pulsar-face'."
  :group 'pulsar-faces)


  (use-package pulsar
    :ensure t
    :init
    (pulsar-global-mode 1)
    :config
    (setq pulsar-pulse-on-window-change t)
    (setq pulsar-pulse t)
    (setq pulsar-delay 0.055)
    (setq pulsar-iterations 10)
    (setq pulsar-face 'dm/pulsar-yellow)
    (setq pulsar-highlight-face 'dm/pulsar-yellow))

#+end_src


#+begin_src elisp
  (load-theme 'modus-vivendi 't)

#+end_src



* [2022-03-17 Thu]


[[https://github.com/publicimageltd/delve][delve]], org-roam dashboard
#+begin_src elisp
  (use-package delve
    :straight (:repo "publicimageltd/delve"
               :host github
               :type git)
    :bind
    ;; the main entry point, offering a list of all stored collections
    ;; and of all open Delve buffers:
    (("<f12>" . delve))
    :config
    ;; set meaningful tag names for the dashboard query
    (setq delve-dashboard-tags '("travel" "falcon" "falcon_doc_external"))
   ;; turn on delve-minor-mode when org roam file is opened:
    (delve-global-minor-mode))
#+end_src






** [2022-03-21 Mon]
#+begin_src elisp
  (use-package vulpea
    :ensure t
    ;; hook into org-roam-db-autosync-mode you wish to enable
    ;; persistence of meta values (see respective section in README to
    ;; find out what meta means)
    :hook ((org-roam-db-autosync-mode . vulpea-db-autosync-enable)))

  (use-package project :ensure t)


#+end_src

** [2022-03-28 Mon]
get all falcon external docs
#+begin_src elisp
(defun vulpea-falcon-external-doc-files ()
    "Return a list of note files containing 'project' tag." ;
    (seq-uniq
     (seq-map
      #'car
      (org-roam-db-query
       [:select [nodes:file]
        :from tags
        :left-join nodes
        :on (= tags:node-id nodes:id)
        :where (like tag (quote "%\"falcon_doc_external\"%"))]))))
#+end_src

** [2022-03-29 Tue]
#+begin_src elisp
  (use-package undo-fu :ensure t)



  (use-package undo-tree
    :ensure t
    :diminish                       ;; Don't show an icon in the modeline
    :bind ("C-x u" . undo-tree-visualize)
    ;;    :hook (org-mode . undo-tree-mode) ;; For some reason, I need this. FIXME.
    :config
    ;; Always have it on
    (global-undo-tree-mode)


    (setq undo-tree-history-directory-alist '(("." . "~/.config/emacs/undo-tree-history")))

    ;; Each node in the undo tree should have a timestamp.
    (setq undo-tree-visualizer-timestamps t)

    ;; Show a diff window displaying changes between undo nodes.
    (setq undo-tree-visualizer-diff t))


#+end_src


** [2022-04-03 Sun]

modern orgmode https://github.com/minad/org-modern

#+begin_src emacs-lisp
  ;; (use-package org-modern :ensure t)
  ;; (add-hook 'org-mode-hook #'org-modern-mode)
  ;; (add-hook 'org-agenda-finalize-hook #'org-modern-agenda)

  ;; (menu-bar-mode -1)
   (menu-bar-mode -1)
   (tool-bar-mode -1)
   (scroll-bar-mode -1)

  ;; Add frame borders and window dividers
  (modify-all-frames-parameters
   '((right-divider-width . 10)
     (internal-border-width . 10)))
  (dolist (face '(window-divider
                  window-divider-first-pixel
                  window-divider-last-pixel))
    (face-spec-reset-face face)
    (set-face-foreground face (face-attribute 'default :background)))
  (set-face-background 'fringe (face-attribute 'default :background))


#+end_src




** [2022-04-08 Fri] pdf templates


#+begin_src elisp
    (setq org-latex-pdf-process
        '("latexmk -pdflatex='pdflatex -interaction nonstopmode' -pdf -bibtex -f %f"))



  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))

  (add-to-list 'org-latex-classes
               '("ethz"
                 "\\documentclass[a4paper,11pt,titlepage]{memoir}
  \\usepackage[utf8]{inputenc}
  \\usepackage[T1]{fontenc}
  \\usepackage{fixltx2e}
  \\usepackage{graphicx}
  \\usepackage{longtable}
  \\usepackage{float}
  \\usepackage{wrapfig}
  \\usepackage{rotating}
  \\usepackage[normalem]{ulem}
  \\usepackage{amsmath}
  \\usepackage{textcomp}
  \\usepackage{marvosym}
  \\usepackage{wasysym}
  \\usepackage{amssymb}
  \\usepackage{hyperref}
  \\usepackage{mathpazo}
  \\usepackage{color}
  \\usepackage{enumerate}
  \\definecolor{bg}{rgb}{0.95,0.95,0.95}
  \\tolerance=1000
        [NO-DEFAULT-PACKAGES]
        [PACKAGES]
        [EXTRA]
  \\linespread{1.1}
  \\hypersetup{pdfborder=0 0 0}"
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))


  (add-to-list 'org-latex-classes
               '("article"
                 "\\documentclass[11pt,a4paper]{article}
  \\usepackage[utf8]{inputenc}
  \\usepackage[T1]{fontenc}
  \\usepackage{fixltx2e}
  \\usepackage{graphicx}
  \\usepackage{longtable}
  \\usepackage{float}
  \\usepackage{wrapfig}
  \\usepackage{rotating}
  \\usepackage[normalem]{ulem}
  \\usepackage{amsmath}
  \\usepackage{textcomp}
  \\usepackage{marvosym}
  \\usepackage{wasysym}
  \\usepackage{amssymb}
  \\usepackage{hyperref}
  \\usepackage{mathpazo}
  \\usepackage{color}
  \\usepackage{enumerate}
  \\definecolor{bg}{rgb}{0.95,0.95,0.95}
  \\tolerance=1000
        [NO-DEFAULT-PACKAGES]
        [PACKAGES]
        [EXTRA]
  \\linespread{1.1}
  "
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")))


  (add-to-list 'org-latex-classes '("ebook"
                                    "\\documentclass[11pt, oneside]{memoir}
  \\setstocksize{9in}{6in}
  \\settrimmedsize{\\stockheight}{\\stockwidth}{*}
  \\setlrmarginsandblock{2cm}{2cm}{*} % Left and right margin
  \\setulmarginsandblock{2cm}{2cm}{*} % Upper and lower margin
  \\checkandfixthelayout
  % Much more laTeX code omitted
  "
                                    ("\\chapter{%s}" . "\\chapter*{%s}")
                                    ("\\section{%s}" . "\\section*{%s}")
                                    ("\\subsection{%s}" . "\\subsection*{%s}")))

#+end_src



** [2022-04-08 Fri]


#+begin_src elisp

  (require 'org-review)

  (defun dm/org-review-agenda-skip ()
    (and (not (or (org-review-toreview-p) (not (org-review-last-review-prop))))
         (org-with-wide-buffer (or (outline-next-heading) (point-max)))))


  (add-hook 'org-agenda-mode-hook
          (lambda ()
            (local-set-key (kbd "C-c C-r")
                           'org-review-insert-last-review)))

#+end_src


** ...

#+begin_src elisp
(setq org-agenda-hide-tags-regexp (regexp-opt '("DO_NOT_ORG_ROAM" "MINE" "WORK" "IMPORTANT")))
#+end_src

** reveal
#+begin_src elisp
(use-package org-re-reveal :ensure t)
#+end_src

** evil mode

Sourced from [[https://quinoa42.github.io/en/dot-emacs/#evil][here]].

#+begin_src elisp

  (use-package general
    :ensure t
    :after which-key
    :config
    (general-evil-setup)
    (general-create-definer my/leader-def
      ;; :prefix my-leader
      :prefix "C-c d")
    )

  (setq evil-want-keybinding nil)
  (use-package evil
    :ensure t
    :demand t
    :after swiper
    :custom
    (evil-esc-delay 0.001 "avoid ESC/meta mixups")
    (evil-shift-width 4)
    (evil-search-module 'evil-search)
    :general
    ;;([remap evil-ex-search-forward] '(lambda () (interactive) (swiper (format "%s" (thing-at-point 'symbol)))))
    ;;([remap evil-ex-search-backward] '(lambda () (interactive) (swiper-backward (format "%s" (thing-at-point 'symbol)))))
    ([remap evil-emacs-state] 'evil-normal-state)
    ([remap evil-undo] 'undo-tree-undo)
    ([remap evil-redo] 'undo-tree-redo)
    (setq evil-disable-insert-state-bindings t)
    (setq evil-undo-system 'undo-redo)
    ;;(define-key evil-motion-state-map "/" 'swiper)
    ;;(define-key evil-motion-state-map "*" '(lambda () (interactive) (swiper (format "%s" (thing-at-point 'symbol)))))
    :config
    ;; Enable evil-mode in all buffers.
    (evil-mode 1))

  (message "Basic evil loaded.")


  (setq evil-want-keybinding nil)
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (setq evil-want-keybinding nil)
    (evil-collection-init))


  (use-package helm-config
    :demand t
    :general
    ([remap find-file]                'helm-find-files)
    ([remap occur]                    'helm-occur)
    ([remap list-buffers]             'helm-buffers-list)
    ([remap dabbrev-expand]           'helm-dabbrev)
    ([remap execute-extended-command] 'helm-M-x)
    (general-nmap "gO" 'helm-semantic-or-imenu)
    :init
    (general-setq helm-display-function #'helm-display-buffer-in-own-frame)
    (general-setq helm-command-prefix-key "C-c h")
    (general-setq helm-ff-skip-boring-files t)
    (unless (boundp 'completion-in-region-function)
      (general-def lisp-interaction-mode-map [remap completion-at-point] 'helm-lisp-completion-at-point)
      (general-def emacs-lisp-mode-map       [remap completion-at-point] 'helm-lisp-completion-at-point)))


  (use-package swiper-helm
    :ensure t
    :after (helm-config swiper)
    :general ("C-s" 'swiper-helm))


  (use-package highlight-indent-guides
    :ensure t
    :hook (prog-mode . highlight-indent-guides-mode)
    :init
    (general-setq highlight-indent-guides-responsive 'top)
    (general-setq highlight-indent-guides-method 'character)
    (general-setq highlight-indent-guides-character ?‚îÇ))


  (use-package evil-org
    :ensure t
    :after (org evil)
    :hook
    (org-mode . (lambda () (evil-org-mode 1)))
    (org-agenda-mode . (lambda () (evil-org-mode 1)))
    :general
    (org-src-mode-map [remap evil-write] 'org-edit-src-save)
    :commands org-agenda
    :config
    (evil-org-set-key-theme)
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))


  ; this is way more powerful.
  (use-package evil-nerd-commenter :ensure t
    :config
    (global-set-key (kbd "M-;") 'evilnc-comment-or-uncomment-lines))

(use-package evil-matchit :ensure t
  :init
  (global-evil-matchit-mode 1))

  (message "done with evil.")


#+end_src


#+begin_src elisp
  (defun minibuffer-keyboard-quit ()
    "Abort recursive edit.
  In Delete Selection mode, if the mark is active, just deactivate it;
  then it takes a second \\[keyboard-quit] to abort the minibuffer."
    (interactive)
    (if (and delete-selection-mode transient-mark-mode mark-active)
        (setq deactivate-mark  t)
      (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
      (abort-recursive-edit)))
  (define-key evil-normal-state-map [escape] 'keyboard-quit)
  (define-key evil-visual-state-map [escape] 'keyboard-quit)
  (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)

  (message "Load recursive quit.")
#+end_src





** Hyperscheduler
#+begin_src elisp
  (use-package org-hyperscheduler
  :ensure t
  :straight
  (:repo "dmitrym0/org-hyperscheduler"
   :host github
   :type git
   :files ("*")))


(message "Done with hyperscheduler")

#+end_src


#+begin_src elisp
    (use-package templatel :ensure t)



#+end_src



* [2022-06-06 Mon]
#+begin_src elisp
  (use-package centered-cursor-mode
  :ensure t
  :demand
  :config
  ;; Optional, enables centered-cursor-mode in all buffers.
  (global-centered-cursor-mode))

#+end_src




* org-dc
#+begin_src elisp
(load-file "/Users/dmitry/workspace/org-dynamics-checklists/org-dc.el")
#+end_src


* Hydra

#+begin_src elisp

  (setq refile-file (concat org-directory "/refile.org"))

    (defhydra dm/hydra-inbox-sweep (:color pink
                               :hint nil)
    "
  _c_: content       _p_: pin           _f_: fitness       _m_: misc
  _l_: not now
  "
    ("c" (dm/refile-to refile-file "Content"))
    ("p" (dm/refile-to refile-file "To Pin"))
    ("f" (dm/refile-to refile-file "Fitness"))
    ("m" (dm/refile-to refile-file "Misc"))
    ("l" (dm/refile-to refile-file "Not Now"))
    ("q" nil "quit" :color blue))

 (message "Done with my refile hydra")
#+end_src





* Schedule subtree randomly.
#+begin_src elisp
  (defun print-entries ()
    (message (cdr (assoc "ITEM" (org-entry-properties)))))

  (defun dm/schedule-subtree ()
    (interactive)
    (org-map-entries #'dm/set-schedule-today-now "TODO=\"TODO\"" 'tree))
#+end_src



* Ankify subtree

1. Create a heading, "Anki"
2. Add [[https://github.com/eyeinsky/org-anki][org-anki cards]]
3. Put point on the "Anki" heading.
4. Invoke ~dm/ankify-subtree~.

#+begin_src elisp
  (defun dm/ankify-heading ()
    (let* ((heading (cdr (assoc "ITEM" (org-entry-properties)))))
      (message "Ankifying: \"%s\"" heading)
      (when (not (eq heading "Anki")) ; ignore Anki headings; kinda ugly.
        (sleep-for 0.1)
        (org-anki-sync-entry))))

  (defun dm/ankify-subtree()
    (interactive)
    (org-map-entries #'dm/ankify-heading nil 'tree))

#+end_src



* Agenda files optimization






#+begin_src elisp
  (defun dm/get-active-agenda-files ()
    (let* ((shell-output (shell-command-to-string "ag -l -r 'TODO|org-gcal' /Users/dmitry/org-roam|grep -v 'archive' | grep '\\.org$'")))
      (split-string (substring shell-output 0 (- (length shell-output) 1))
                    "\n")))


  (setq org-agenda-files (dm/get-active-agenda-files))



#+end_src




* Quick refile

Refiles current headline to ~FILE~ and ~HEADLINE~. Headline must be an exact match:

~(dm/refile-to "refile.org" "Content")~

#+begin_src elisp
  (defun dm/refile-to (file headline)
    "Move current headline to specified location"
    (save-window-excursion
      (let ((pos (save-excursion
                   (find-file file)
                   (org-find-exact-headline-in-buffer headline))))
        (org-refile nil nil (list headline file nil pos)))))

#+end_src



* dumb jump
Use ~gd~ to jump to definitions in evil mode.
#+begin_src elisp
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)



    (use-package dumb-jump
    :bind (("C-M-g" . dumb-jump-go)
           ("C-M-p" . dumb-jump-back)
           ("C-M-q" . dumb-jump-quick-look)))



  (defhydra dumb-jump-hydra (:color blue :columns 3)
    "Dumb Jump"
    ("j" dumb-jump-go "Go")
    ("o" dumb-jump-go-other-window "Other window")
    ("e" dumb-jump-go-prefer-external "Go external")
    ("x" dumb-jump-go-prefer-external-other-window "Go external other window")
    ("i" dumb-jump-go-prompt "Prompt")
    ("l" dumb-jump-quick-look "Quick look")
    ("b" dumb-jump-back "Back"))

  (message "dumb jump loaded.")
#+end_src



* keyfreq

#+begin_src elisp
    (use-package keyfreq :ensure t
    :config
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))

#+end_src



* Epub, nov.el mode,

#+begin_src elisp
  (require 'nov)
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))

  (message "nov.el Loaded")
#+end_src



* org-fc

#+begin_src elisp
(straight-use-package 'hydra)
(straight-use-package
 '(org-fc
   :type git :repo "https://git.sr.ht/~l3kn/org-fc"
   :files (:defaults "awk" "demo.org")
   :custom (org-fc-directories `(,(file-truename org-roam-directory)))
   :config
   (require 'org-fc-hydra)))
#+end_src




* evil work arounds

#+begin_src elisp
  (evil-set-initial-state 'nov-mode 'emacs)
  (evil-set-initial-state 'pocket-reader-mode 'emacs)
  (add-hook 'org-fc-review-flip-mode-hook 'evil-emacs-state)
  (add-hook 'org-fc-review-rate-mode-hook 'evil-emacs-state)
  (add-hook 'org-fc-after-review-hook 'evil-normal-state)
#+end_src



* [dm] Capture a headline into today's daily.

#+begin_src elisp

  (defun dm/goto-tasks-heading ()
    "Find the tasks heading"
    (search-forward "* Tasks"))


  (defun dm/get-todays-daily-file ()
    "Gets the path to today's daily file"
    (let* ((daily-file (format "%s.org" (format-time-string "%Y-%m-%d")))
           (full-path (concat org-roam-directory org-roam-dailies-directory daily-file )))
      full-path)
    )

  (defun dm/move-task-to-today-and-reset-schedule ()
    "Moves a task from an old daily note to today's note"
    (let* ((daily-file (dm/get-todays-daily-file)))
      (save-window-excursion
        (org-agenda-goto)
        (org-cut-subtree)
        (find-file daily-file)
        (goto-line 1)
        (dm/goto-tasks-heading)
        (org-paste-subtree)
        (org-schedule nil (format-time-string  "%Y-%m-%d 12:00"))
        )
      ))



  (defun dm/link-todo-into-todays-daily ()
    "Links the headline at point into today's tasks in the daily note."
    (let* ((daily-file (format "%s.org" (format-time-string "%Y-%m-%d")))
           (full-path (concat org-roam-directory org-roam-dailies-directory daily-file ))
           (heading-id (org-id-get-create))
           (heading (cdr (assoc "ITEM" (org-entry-properties)))))
      (save-window-excursion
        (find-file full-path)
        (goto-line 1)
        (dm/goto-tasks-heading)
        (evil-org-end-of-line)
        (org-insert-todo-subheading "")
        (org-insert-link nil (format "id:%s" heading-id) heading)
        )
      )
    )



  (defun dm/link-agenda-item-into-todays-daily ()
    (save-window-excursion
      (org-agenda-goto)
      (dm/link-todo-into-todays-daily)))

#+end_src



* Get journal prompt
#+begin_src elisp
  (defun dm/get-journaling-prompt ()
    "Returns a single line from journaling prompts."
    (save-window-excursion
      (find-file (concat org-roam-directory "journaling_prompts.org"))
      (goto-char (point-max))
      (let* ((number-of-prompts (- (line-number-at-pos) 10)))
        (goto-line (+ 10 (random number-of-prompts)))
        (s-chomp (thing-at-point 'line t)))))




#+end_src



* org-noter-fork

#+begin_src elisp
      (push "/Users/dmitry/workspace/org-noter-plus-djvu" load-path)
      (push "/Users/dmitry/workspace/org-noter-plus-djvu/other" load-path)
      (push "/Users/dmitry/workspace/org-noter-plus-djvu/modules" load-path)
      (require 'org-noter)
      (require 'org-noter-nov)
      (require 'org-noter-pdf)
      (require 'org-noter-nov-overlay)


      (use-package pdf-tools-org-noter-helpers :ensure t
      :straight (
                 :type git :repo "https://github.com/analyticd/pdf-tools-org-noter-helpers")
      :config
    (require 'pdf-tools-org-noter-helpers))


#+end_src

* Move text
#+begin_src elisp
  (use-package move-text :ensure t
    :config
    (move-text-default-bindings)
    )

#+end_src


* ws-butler

#+begin_src elisp
  (use-package ws-butler :ensure t
  :config
  (ws-butler-global-mode))

#+end_src

Preserve emacs open buffers. Restore 5 on open and then when emacs is idle open more.
#+begin_src emacs-lisp
  (desktop-read)
#+end_src
