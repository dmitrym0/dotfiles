* Intro

My emacs init file.


** Don't forget

    - ~C - c C -, ~invokes Emacs templating system.


** Still needs doing:

- Change highlight color.Selecting with a mouse or ~C - SPC~I can't see the highlight.

    * MELPA
# + begin_src emacs - lisp
    (require 'package)
        (add - to - list 'package-archives '("melpa". "http://melpa.org/packages/"))
# + end_src

        * Init
soft wrap lines(wrap around past screen boundary)
# + begin_src emacs - lisp
        (global - visual - line - mode 1)
        (show - paren - mode 1)
# + end_src

highlight current line
# + begin_src emacs - lisp
        (global - hl - line - mode t)
# + end_src

Ensure that files are reloaded from disk(when switching branches, or from dropbox sync)
# + begin_src emacs - lisp
        (global - auto - revert - mode 1)
        (setq auto - revert - interval 1
          ring - bell - function 'ignore       
          scroll - margin 1 ; Space between cursor and top / bottom
          )


(fset 'yes-or-no-p 'y - or - n - p)

# + end_src

Store autosaves elsewhere, borrowed from[[https://github.com/larstvei/dot-emacs][here]]
# + begin_src emacs - lisp
        (defvar emacs - autosave - directory
            (concat user - emacs - directory "autosaves/")
  "This variable dictates where to put auto saves. It is set to a
  directory called autosaves located wherever your.emacs.d / is
  located.")

;; Sets all files to be backed up and auto saved in a single directory.
(setq backup - directory - alist
                `((".*" . ,emacs-autosave-directory))
      auto-save-file-name-transforms
      `((".*", emacs - autosave - directory t)))
# + end_src


Preserve emacs open buffers.Restore 5 on open and then when emacs is idle open more.
        # + begin_src emacs - lisp
            (setq desktop - lazy - idle - delay 25)
            (setq desktop - restore - eager 5)
            (desktop - save - mode 1)
            (desktop - read)
            (setq desktop - path '("~/.emacs.d/.cache/"))
# + end_src

turn on variable syntax highlighting
# + begin_src emacs - lisp
                (add - hook 'after-init-hook 'global - color - identifiers - mode) 
# + end_src

no startup message
# + begin_src emacs - lisp
                (setq inhibit - startup - message t) 
# + end_src

use[[https://github.com/technomancy/better-defaults][better defaults]]
# + begin_src emacs - listp
                        (require 'better-defaults)
# + end_src


No tabs!
# + begin_src emacs - lisp
                            (setq -default indent - tabs - mode nil)
# + end_src

Autoload files that have been changed on disk, but not locally
# + begin_src emacs - lisp
                            (global - auto - revert - mode t)
# + end_src

Highlight everything between two exclamation marks(!highlighted!)
# + begin_src emacs - lisp
                            (defun org - add - my - extra - markup()
  "Add highlight emphasis."
                                    (add - to - list 'org-font-lock-extra-keywords
               '("[^\\w]\\(:\\[^\n\r\t]+:\\)[^\\w]"
                                            (1 '(face highlight invisible nil)))))
                                                (add - hook 'org-font-lock-set-keywords-hook #'org - add - my - extra - markup)
# + end_src


When we switch windows or scroll, for example, we get a wave of light near the cursor.
    # + begin_src emacs - lisp
        (use - package beacon
  : diminish
  : config(setq beacon - color "#666600")
  : hook((org - mode text - mode).beacon - mode))
# + end_src

Use solarized - dark theme from doom - themes.
    # + begin_src emacs - lisp
        (use - package doom - themes  : diminish
  : ensure t
  : config(load - theme 'doom-molokai t)
        )
# + end_src


Use dome modeline
# + begin_src emacs - lisp
            (use - package doom - modeline : diminish : ensure t
  : config(doom - modeline - mode 1)
                    (winner - mode 1))

# + end_src


# + begin_src emacs - lisp
            (use - package golden - ratio
    : ensure t
    : diminish golden - ratio - mode
    : init(golden - ratio - mode 1))
# + end_src

No toolbar.
            # + begin_src emacs - lisp
                (tool - bar - mode - 1) 
# + end_src



            * Templates
            ** Enable easy templates(from[[https://emacs.stackexchange.com/a/46992][here]])
# + begin_src emacs - lisp
                    (require 'org-tempo)
# + end_src

                        * Keybindings
                        ** Personal

Lets keep`C-c d` for personal shortcuts.
    # + begin_src emacs - lisp
        (global - set - key(kbd "C-c d p") #'org-pomodoro)
# + end_src



            * Org

            ** Init

indent all org mode files
# + begin_src emacs - lisp
            (setq org - download - image - dir "images")
            (setq org - startup - indented t)
            (setq org - ellipsis "‚Ü™")
            (setq org - outline - path - complete -in -steps nil)
            (setq org - refile - targets '((org-agenda-files :maxlevel . 3)))
                (setq org - refile - use - outline - path 'file)
                    (setq org - directory "~/org-roam")
                    (setq  org - download - image - dir(concat org - directory "/images"))
                    (setq org - outline - path - complete -in -steps nil)
# + end_src

enable automated indent mode for org files
# + begin_src emacs - lisp
            (add - hook 'org-mode-hook 'org - indent - mode)
# + end_src

Disable done tasks in agenda view.
    # + begin_src emacs - lisp
        (setq org - agenda - skip - scheduled -if-done t)
(setq org - agenda - skip - deadline -if-done t)
# + end_src



done tasks get a[[https://github.com/lmintmate/emacs.d#strikethrough-for-done-tasks][strike through]]
# + begin_src emacs - lisp
        (setq org - fontify - done - headline t)
        (set - face - attribute 'org-done nil :foreground "PaleGreen" :strike-through t :weight 'bold)
        (set - face - attribute 'org-headline-done nil :foreground "LightSalmon" :strike-through t)
# + end_src



# + begin_src emacs - lisp
            (use - package org - superstar : ensure t : hook(org - mode. (lambda()(org - superstar - mode 1))))
            (add - hook 'org-mode-hook (lambda () (org-superstar-mode 1)))

                (setq org - superstar - headline - bullets - list '("üÖê" "üÖë" "üÖí" "üÖì"  "üÖî"  "üÖï"  "üÖñ"))
                    (setq org - superstar - special - todo - items t)
                    (setq org - superstar - todo - bullet - alist '(("TODO" . ?‚ûΩ)
                        ("CURRENTLY". ?‚åõ)
                        ("SOMEDAY". ?‚è±)
                        ("CANCELLED". ?‚úò)
                        ("DONE". ?‚úì)))
# + end_src






                ** Capture templates


# + begin_src emacs - lisp
                (setq org - capture - templates
                    `(
          ("l" "Log" entry
           (file+olp+datetree ,(concat org-directory "/log.org"))
           "* Entered on %U
  %?
  ")
          ("t" "TODO" entry
           (file+headline ,(concat org-directory "/inbox.org") "INBOX")
           "* TODO %?
    %i
    %a")
          ("h" "how do i" entry
           (file+headline ,(concat org-directory "/20200422070715_howdoi.org") "INBOX")
           "* %?
    %i
    %a")
          ("d" "Dailies")
          ("p" "potatr")
          ("pj" "Journal" entry
           (file+olp+datetree "~/Dropbox/orgmode/potatr.org" "Log")
           "* Entered on %U
  %?
  ")
          ("di" "Important thing daily" entry
/           (file+olp+datetree ,(concat org-directory  "/important-things-daily-2021.org"))
           "* Entered on %U
  %?")

          ("dj" "Journal" entry
           (file+olp+datetree ,(concat org-directory "/personal-daily-2021.org"))
           "* Entered on %U
  %?")
          ("dc" "Daily Checkbox" entry
           (file+olp+datetree ,(concat org-directory "~/work-log-2021.org"))
           (file "~/Dropbox/orgmode/template-morning-work-checklist.org"))))
#+end_src

** custom agenda

Create a custom agenda view.

#+begin_src emacs-lisp
(setq org-agenda-files '("~/org-roam"))
#+end_src


Disable done tasks in agenda view.
#+begin_src emacs-lisp
(setq org-agenda-skip-scheduled-if-done t)
#+end_src
  
** custom agenda

Create a custom agenda view.


#+begin_src emacs-lisp
 (setq org-agenda-custom-commands
   '(("D" "Overview for today"
      ((tags-todo "WORK:URGENT"
                  ((org-agenda-overriding-header "Urgent Work")
                   (org-agenda-skip-function 'org-agenda-skip-if-scheduled-later)))
       (tags-todo "WORK:IMPORTANT"
                  ((org-agenda-overriding-header "Important Work")
                   (org-agenda-skip-function 'org-agenda-skip-if-scheduled-later)))
       (tags-todo "-WORK:URGENT"
                  ((org-agenda-overriding-header "Mine Urgent")
                   (org-agenda-skip-function 'org-agenda-skip-if-scheduled-later)))
       (tags-todo "-WORK:IMPORTANT"
                  ((org-agenda-overriding-header "Mine Important")
                   (org-agenda-skip-function 'org-agenda-skip-if-scheduled-later)))
       (agenda ""
               ((org-agenda-overriding-header "Today")
                (org-agenda-span 1)
                (org-agenda-sorting-strategy
                 '(time-up priority-down))))))
     ("R" "Review projects" tags-todo "-CANCELLED/"
      ((org-agenda-overriding-header "Reviews Scheduled")
       (org-agenda-skip-function 'org-review-agenda-skip)
       (org-agenda-cmp-user-defined 'org-review-compare)
       (org-agenda-sorting-strategy
        '(user-defined-down))))
     ("z" "zeemo"
      ((todo "TODO"
             (org-agenda-skip-entry-if -TIMESTAMP={\.}/! | +TIMESTAMP<<today>))))
     ("n" "Agenda and all TODOs"
      ((agenda "" nil)
       (alltodo "" nil))
      nil)))
#+end_src

**** Custom org functions
#+begin_src emacs-lisp
(defun org-agenda-skip-if-scheduled-later ()
"If this function returns nil, the current match should not be skipped.
Otherwise, the function must return a position from where the search
should be continued."
  (ignore-errors
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (scheduled-seconds
            (time-to-seconds
              (org-time-string-to-time
                (org-entry-get nil "SCHEDULED"))))
          (now (time-to-seconds (current-time))))
       (and scheduled-seconds
            (>= scheduled-seconds now)
            subtree-end))))
#+end_src


** Other
Fancy TODO states
#+begin_src emacs-lisp 
(setq org-todo-keywords '((sequence "TODO(t)" "|" "DONE(d)") (sequence "WAITING(w)" "|") (sequence "|" "CANCELED(c)")))
#+end_src

#+begin_src emacs-lisp
(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("NEXT" :foreground "blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("WAITING" :foreground "orange" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold)
              ("MEETING" :foreground "forest green" :weight bold)
              ("PHONE" :foreground "forest green" :weight bold))))
#+end_src
** Shortcuts
org-agenda everywhere.

#+begin_src emacs-lisp
(global-set-key "\C-ca" 'org-agenda)
#+end_src

* Modules
** Tabbar

Show a tabbar at the top of the screen.

#+begin_src emacs-lisp 
(use-package tabbar
:ensure t
:config (tabbar-mode 1)
)
#+end_src

** Treemacs
A file browser.

#+begin_src emacs-lisp 

 (use-package treemacs
    :ensure t
    :defer t
    :config
    (progn

      (setq treemacs-follow-after-init          t
            treemacs-width                      35
            treemacs-indentation                2
            treemacs-git-integration            t
            treemacs-collapse-dirs              3
            treemacs-silent-refresh             nil
            treemacs-change-root-without-asking nil
            treemacs-sorting                    'alphabetic-desc
            treemacs-show-hidden-files          t
            treemacs-never-persist              nil
            treemacs-is-never-other-window      nil
            treemacs-goto-tag-strategy          'refetch-index)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t))
    :bind
    (:map global-map
          ([f8]        . treemacs-toggle)
          ([f9]        . treemacs-projectile-toggle)
          ("<C-M-tab>" . treemacs-toggle)
          ("M-0"       . treemacs-select-window)
          ("C-c 1"     . treemacs-delete-other-windows)
        ))


  (use-package treemacs-projectile
    :defer t
    :ensure t
    :config
    (setq treemacs-header-function #'treemacs-projectile-create-header)
    )



#+end_src

** Projectile

#+begin_src emacs-lisp 
(projectile-mode +1)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+end_src

** Random
#+begin_src emacs-lisp
(use-package org-download :ensure t )
#+end_src

fzf support
#+begin_src emacs-lisp 
(use-package fzf :ensure t)
#+end_src

#+begin_src emacs-lisp 
(use-package all-the-icons 
:ensure t
:defer 0.5)
#+end_src

[[https://github.com/gregsexton/origami.el/tree/e558710a975e8511b9386edc81cd6bdd0a5bda74][Fancy text folding]]
#+begin_src emacs-lisp 
(use-package origami
:ensure t)
#+end_src

Highlight current line
#+begin_src emacs-lisp 
(use-package beacon
:ensure t
:config
(beacon-mode 1))
#+end_src


#+begin_src emacs-lisp 
(use-package color-theme-modern
  :ensure t)

#+end_src

WhichKey
#+begin_src emacs-lisp 

(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+end_src


dimmer, highlight current buffer
#+begin_src emacs-lisp 
(use-package dimmer
  :ensure t
  :config
   (dimmer-configure-which-key)
   (dimmer-configure-helm)
   (dimmer-mode t))
#+end_src

org-roam
#+begin_src emacs-lisp 
;; keybindings for org-roam
(use-package org-roam
      :ensure t
      :hook
      (after-init . org-roam-mode)
      :custom
      (org-roam-directory "~/org-roam")
      :bind (:map org-roam-mode-map
              (("C-c n l" . org-roam)
               ("C-c n f" . org-roam-find-file)
               ("C-c n t" . org-roam-dailies-today)
               ("C-c n y" . org-roam-dailies-yesterday)
               ("C-c n n" . org-roam-dailies-tomorrow)
               ("C-c n g" . org-roam-graph))
              :map org-mode-map
              (("C-c n i" . org-roam-insert))
              (("C-c n I" . org-roam-insert-immediate))))
#+end_src

helm

#+begin_src emacs-lisp 
(use-package helm
  :ensure t
  :config
(global-set-key (kbd "M-x") #'helm-M-x)
(global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
(global-set-key (kbd "C-x C-f") #'helm-find-files)
(helm-mode 1))
#+end_src

python

#+begin_src emacs-lisp 
(use-package elpy
  :ensure t
  :config
(elpy-enable)) ;; enable python support

;; Enable Flycheck
(when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))

;; python formatter
(use-package blacken :ensure t)
(use-package dap-mode :ensure t)
;(use-package dap-ui :ensure t)
;(use-package dap-python :ensure t :config (dap-mode 1) (dap-ui-mode 1))
#+end_src

https://github.com/zk-phi/indent-guide
show vertical lines to guide indentation
#+begin_src emacs-lisp
  (use-package indent-guide
    :ensure t
    :config
    (indent-guide-global-mode))
#+end_src

[[https://github.com/jacktasia/dumb-jump#obsolete-commands-and-options][Dumb jump]]
Note, that this disables etags.

Use `C - M g` to jump.

#+begin_src emacs-lisp
  (use-package dumb-jump
     :ensure t
     :config
      (setq xref-backend-functions (remq 'etags--xref-backend xref-backend-functions))
       (add-to-list 'xref-backend-functions #'dumb-jump-xref-activate t))
#+end_src

[[https://github.com/emacsorphanage/helm-ag][helm-ag]]. Pick up the keyword at point when doing searches.
#+begin_src emacs-lisp
    (use-package helm-ag
       :ensure t
       :config (setq helm-ag-insert-at-point 'symbol))
   
#+end_src


[[https://melpa.org/#/no-littering][no-literring!]]
#+begin_src emacs-lisp
;(use-package no-littering :ensure t)
#+end_src

#+begin_src emacs-lisp
(use-package emojify :ensure t
  :hook (after-init . global-emojify-mode))
#+end_src


[[https://melpa.org/#/expand-region][expand-region]], intelligently adjust selection
#+begin_src emacs-lisp
(use-package expand-region :ensure t :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+end_src

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))
#+end_src


Fuzzy? matching. ~org refi~, matches ~org-refile~ and ~org-agenda-refile~
#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :custom (completion-styles '(orderless)))
#+end_src


#+begin_src emacs-lisp
(defun org-add-my-extra-fonts ()
  "Add extra fonts."
  (add-to-list 'org-font-lock-extra-keywords '("\\(!\\)\\([^\n\r\t]+?\\)\\(!\\)" (1 '(face highlight invisible t)) (2 'highlight t) (3 '(face highlight invisible t))) t))

(add-hook 'org-font-lock-set-keywords-hook #'org-add-my-extra-fonts)

; highlighting https://www.gonsie.com/blorg/org-highlight.html
(defun my-html-mark-tag (text backend info)
  "Transcode :blah: into <mark>blah</mark> in body text."
  (when (org-export-derived-backend-p backend 'html)
    (let ((text (replace-regexp-in-string "\\(!\\)\\([^\n\r\t]+?\\)\\(!\\)" "<mark>"  text nil nil 1 nil)))
      (replace-regexp-in-string "\\(<mark>\\)\\([^\n\r\t]+?\\)\\(!\\)" "</mark>" text nil nil 3 nil))))

;(add-to-list 'org-export-filter-plain-text-functions 'my-html-mark-tag)
#+end_src
** ox-hugo
#+begin_src elisp
   (use-package ox-hugo
     :ensure t
     :config
       (use-package ox-hugo
     :ensure t
     :config
     ))
#+end_src

** js2 (TypeScript refactoring)
#+begin_src elisp
  (use-package js2-refactor
    :ensure t
    :config
    (add-hook 'js2-mode-hook #'js2-refactor-mode)
    (js2r-add-keybindings-with-prefix "C-c C-m")
    )

#+end_src


** Mocha (JS testing support)
#+begin_src elisp
  (use-package mocha
    :ensure t)

#+end_src

** Evil Mode üòà
#+begin_src elisp
    (use-package evil
      :ensure t
      :config
      (require 'evil)
      (evil-mode 1)
      )

#+end_src


** Tide (Typescript interactive development environment for mac)

#+begin_src elisp
      (use-package tide
        :ensure t
        :after (typescript-mode company flycheck)
        :hook ((typescript-mode . tide-setup)
               (typescript-mode . tide-hl-identifier-mode)
               (before-save . tide-format-before-save)))

      (use-package typescript-mode
        :ensure t
    :config)
#+end_src


* Last 
Start maximized
** TODO There's some issue with this; probably due to the order of operations?
#+begin_src emacs-lisp
(add-hook 'window-setup-hook 'toggle-frame-maximized t)
(toggle-frame-maximized)
(add-to-list 'initial-frame-alist '(fullscreen . maximized))

#+end_src



