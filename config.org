:PROPERTIES:
:ID:       1859DDBD-1924-4A25-910F-4DBD4965B8CB
:END:
#+TITLE: DotConfig


* Intro

My emacs init file.


** Don't forget

- ~C-c C-,~ invokes Emacs templating system.


** Still needs doing:

- Change highlight color. Selecting with a mouse or ~C-SPC~ I can't see the highlight.
  
* MELPA
#+begin_src emacs-lisp 
    (require 'package)
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
    (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/") t)
    (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
    (push (expand-file-name "~/.emacs.d/extra") load-path)
#+end_src

* Init
soft wrap lines (wrap around past screen boundary)
#+begin_src emacs-lisp 
  (global-visual-line-mode 1)
  (show-paren-mode 1)
  (setq show-paren-delay 0)
  (winner-mode 1)
  (require 'org-pomodoro)
(setq mac-option-modifier 'meta)
#+end_src

highlight current line
#+begin_src emacs-lisp 
(global-hl-line-mode t)
#+end_src

Ensure that files are reloaded from disk (when switching branches, or from dropbox sync)
#+begin_src emacs-lisp
    (global-auto-revert-mode 1)
    (setq auto-revert-interval 1
            ring-bell-function 'ignore
            scroll-margin 1 ; Space between cursor and top/bottom
        )


      (fset 'yes-or-no-p 'y-or-n-p)

  (global-activity-watch-mode t)
  (setq use-package-compute-statistics t)

#+end_src

Store autosaves elsewhere, borrowed from [[https://github.com/larstvei/dot-emacs][here]]
#+begin_src emacs-lisp
(defvar emacs-autosave-directory
  (concat user-emacs-directory "autosaves/")
  "This variable dictates where to put auto saves. It is set to a
  directory called autosaves located wherever your .emacs.d/ is
  located.")

;; Sets all files to be backed up and auto saved in a single directory.
(setq backup-directory-alist
      `((".*" . ,emacs-autosave-directory))
      auto-save-file-name-transforms
      `((".*" ,emacs-autosave-directory t)))
#+end_src


Preserve emacs open buffers. Restore 5 on open and then when emacs is idle open more.
#+begin_src emacs-lisp
  (setq desktop-lazy-idle-delay 25)
  (setq desktop-restore-eager 5)
  (desktop-save-mode 1)
  (desktop-read)
  (setq desktop-path '("~/.emacs.d/.cache/"))

#+end_src

turn on variable syntax highlighting
#+begin_src emacs-lisp 
(use-package color-identifiers-mode :ensure t)
(add-hook 'after-init-hook 'global-color-identifiers-mode) 
#+end_src

no startup message
#+begin_src emacs-lisp 
(setq inhibit-startup-message t) 
#+end_src

use [[https://github.com/technomancy/better-defaults][better defaults]]
#+begin_src emacs-lisp
;(use-package better-defaults :ensure t)
#+end_src

disable lockfiles
#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src


show column numbers in the mode line
#+begin_src emacs-lisp
(column-number-mode)
#+end_src

show trailing whitespaces, kinda makes emacs ugly.
#+begin_src emacs-lisp
  (setq-default show-trailing-whitespace nil)
  (setq-default indicate-empty-lines t)
#+end_src
No tabs!
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

Autoload files that have been changed on disk, but not locally
#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src

Highlight everything between two exclamation marks (!highlighted!)
#+begin_src emacs-lisp
    ;; (defun org-add-my-extra-markup ()
    ;;   "Add highlight emphasis."
    ;;   (add-to-list 'org-font-lock-extra-keywords
    ;;                '("[^\\w]\\(:\\[^\n\r\t]+:\\)[^\\w]"
    ;;                  (1 '(face highlight invisible nil)))))
    ;; (add-hook 'org-font-lock-set-keywords-hook #'org-add-my-extra-markup)



    ;; ;; (defun my-html-mark-tag (text backend info)
    ;; ;; "Transcode :blah: into <mark>blah</mark> in body text."
    ;; ;; (when (org-export-derived-backend-p backend 'html)
    ;; ;;   (let ((text (replace-regexp-in-string "[^\\w]\\(:\\)[^\n\t\r]+\\(:\\)[^\\w]" "<mark>"  text nil nil 1 nil)))
    ;; ;;     (replace-regexp-in-string "[^\\w]\\(<mark>\\)[^\n\t\r]+\\(:\\)[^\\w]" "</mark>" text nil nil 2 nil))))

 ; (add-to-list 'org-export-filter-plain-text-functions 'my-html-mark-tag) ;
#+end_src


enable wakatime
#+begin_src elisp
   (global-wakatime-mode)

#+end_src

When we switch windows or scroll, for example, we get a wave of light near the cursor.
#+begin_src emacs-lisp
  ;; (use-package beacon
  ;;   :diminish
  ;;   :config (setq beacon-color "#666600") (setq beacon-blink-when-window-scrolls t) (setq beacon-blink-when-window-changes t)
  ;;   :hook   ((org-mode text-mode) . beacon-mode))
#+end_src

Use solarized-dark theme from doom-themes.
#+begin_src emacs-lisp
  (use-package doom-themes  :diminish
  :ensure t
  :config (load-theme 'doom-molokai t)
  )
#+end_src


Use dome modeline
#+begin_src emacs-lisp
  ;; (use-package doom-modeline :diminish :ensure t
  ;; :config (doom-modeline-mode 1)
  ;;         (winner-mode 1))

#+end_src


#+begin_src emacs-lisp
  (use-package golden-ratio
    :ensure t
    :diminish golden-ratio-mode
    :init (golden-ratio-mode 1))
#+end_src

No toolbar.
#+begin_src emacs-lisp
(tool-bar-mode -1) 
#+end_src


* Templates
** Enable easy templates (from [[https://emacs.stackexchange.com/a/46992][here]])
#+begin_src emacs-lisp 
(require 'org-tempo)
#+end_src

* Keybindings
** Personal

Lets keep `C-c d` for personal shortcuts.
#+begin_src emacs-lisp 
    (global-set-key (kbd "C-c d p") #'org-pomodoro)
    (global-set-key (kbd "C-c d g") #'org-gcal-post-at-point)
    (global-set-key (kbd "C-c d i") #'org-anki-sync-entry)
#+end_src

recompile.
#+begin_src emacs-lisp
(global-set-key (kbd "C-c c") 'recompile)
#+end_src

* Org

** Init

indent all org mode files
#+begin_src emacs-lisp
  (setq org-startup-indented t)
  (setq org-ellipsis "‚Ü™")
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
  (setq org-refile-use-outline-path 'file)
  (setq org-directory "~/org-roam")
  (setq org-download-image-dir (concat org-directory "/images"))
  (setq org-image-actual-width 300)
  (setq org-download-screenshot-method "/opt/homebrew/bin/pngpaste %s")


#+end_src

enable automated indent mode for org files
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

Disable done tasks in agenda view.
#+begin_src emacs-lisp
(setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-skip-deadline-if-done t)
#+end_src



done tasks get a [[https://github.com/lmintmate/emacs.d#strikethrough-for-done-tasks][strike through]]
#+begin_src emacs-lisp
(setq org-fontify-done-headline t)
(set-face-attribute 'org-done nil :foreground "PaleGreen" :strike-through t :weight 'bold)
(set-face-attribute 'org-headline-done nil :foreground "LightSalmon" :strike-through t)
#+end_src



#+begin_src emacs-lisp
  (use-package org-superstar :ensure t :hook (org-mode . (lambda () (org-superstar-mode 1))))
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
  
  (setq org-superstar-headline-bullets-list '("üÖê" "üÖë" "üÖí" "üÖì"  "üÖî"  "üÖï"  "üÖñ"))
  (setq org-superstar-special-todo-items t)
  (setq org-superstar-todo-bullet-alist '(("TODO" . ?‚ûΩ)
                                          ("CURRENTLY" . ?‚åõ)
                                          ("SOMEDAY" . ?‚è±)
                                          ("CANCELLED" . ?‚úò)
                                          ("DONE" . ?‚úì)))
#+end_src






** Capture templates


#+begin_src emacs-lisp
  (setq org-capture-templates
        `(
          ("l" "Log" entry
           (file+olp+datetree ,(concat org-directory "/log.org"))
           "* Entered on %U
                         %?
                         ")
          ("t" "TODO" entry
           (file+headline ,(concat org-directory "/inbox.org") "INBOX")
           "* TODO %?
                           %i
                           %a")
          ("h" "how do i" entry
           (file+headline ,(concat org-directory "/20200422070715_howdoi.org") "INBOX")
           "* %?
                           %i
                           %a")
          ("d" "Dailies")
          ("p" "potatr")
          ("pj" "Journal" entry
           (file+olp+datetree "~/Dropbox/orgmode/potatr.org" "Log")
           "* Entered on %U
                         %?
                         ")
          ("di" "Important thing daily" entry
           (file+olp+datetree ,(concat org-directory  "/important-things-daily-2022.org"))
           "* Entered on %U
              %?")

          ("dj" "Journal" entry
           (file+olp+datetree ,(concat org-directory "/personal-daily-2022.org"))
           "* Entered on %U
              %?")
          ("dc" "Daily Checkbox" entry
           (file+olp+datetree ,(concat org-directory "~/work-log-2021.org"))
           (file "~/Dropbox/orgmode/template-morning-work-checklist.org"))))



  (setq org-roam-dailies-capture-templates
        '(("d" "default" plain (file "~/Dropbox/orgmode/template-morning-work-checklist.org")
           :target (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n")
           :jump-to-captured

           )))


  (setq org-roam-capture-templates
        '(("d" "default" plain "%?"
           :target (file+head "${slug}.org"
                              "#+title: ${title}\n")
           :unnarrowed t)
        ("b" "book" plain (file "~/Dropbox/orgmode/book-review-template.org")
           :target (file+head "${slug}.org" "#+title: ${title}\n")
           :jump-to-captured
           ))


  )

#+end_src

** custom agenda

Create a custom agenda view.

#+begin_src emacs-lisp
(setq org-agenda-files (list org-directory 
                             (concat org-directory "/daily")))
#+end_src


Disable done tasks in agenda view.
#+begin_src emacs-lisp
(setq org-agenda-skip-scheduled-if-done t)
#+end_src
  
** custom agenda

Create a custom agenda view.


#+begin_src emacs-lisp
 (setq org-agenda-custom-commands
   '(("D" "Overview for today"
      ((tags-todo "WORK:URGENT"
                  ((org-agenda-overriding-header "Urgent Work")
                   (org-agenda-skip-function 'org-agenda-skip-if-scheduled-later)))
       (tags-todo "WORK:IMPORTANT"
                  ((org-agenda-overriding-header "Important Work")
                   (org-agenda-skip-function 'org-agenda-skip-if-run-with-idle-timerscheduled-later)))
       (tags-todo "-WORK:URGENT"
                  ((org-agenda-overriding-header "Mine Urgent")
                   (org-agenda-skip-function 'org-agenda-skip-if-scheduled-later)))
       (tags-todo "-WORK:IMPORTANT"
                  ((org-agenda-overriding-header "Mine Important")
                   (org-agenda-skip-function 'org-agenda-skip-if-scheduled-later)))
       (agenda ""
               ((org-agenda-overriding-header "Today")
                (org-agenda-span 1)
                (org-agenda-sorting-strategy
                 '(time-up priority-down))))))
     ("R" "Review projects" tags-todo "-CANCELLED/"
      ((org-agenda-overriding-header "Reviews Scheduled")
       (org-agenda-skip-function 'org-review-agenda-skip)
       (org-agenda-cmp-user-defined 'org-review-compare)
       (org-agenda-sorting-strategy
        '(user-defined-down))))
     ("z" "zeemo"
      ((todo "TODO"
             (org-agenda-skip-entry-if -TIMESTAMP={\.}/! | +TIMESTAMP<<today>))))
     ("n" "Agenda and all TODOs"
      ((agenda "" nil)
       (alltodo "" nil))
      nil)))
#+end_src

**** Custom org functions
#+begin_src emacs-lisp
(defun org-agenda-skip-if-scheduled-later ()
"If this function returns nil, the current match should not be skipped.
Otherwise, the function must return a position from where the search
should be continued."
  (ignore-errors
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (scheduled-seconds
            (time-to-seconds
              (org-time-string-to-time
                (org-entry-get nil "SCHEDULED"))))
          (now (time-to-seconds (current-time))))
       (and scheduled-seconds
            (>= scheduled-seconds now)
            subtree-end))))
#+end_src


** Other
Fancy TODO states
#+begin_src emacs-lisp 
(setq org-todo-keywords '((sequence "TODO(t)" "|" "DONE(d)") (sequence "WAITING(w)" "|") (sequence "|" "CANCELED(c)")))
#+end_src

#+begin_src emacs-lisp
  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("NEXT" :foreground "blue" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold)
                ("MEETING" :foreground "forest green" :weight bold)
                ("PHONE" :foreground "forest green" :weight bold))))
  
  
  ; highlight the current task in agenda mode
(add-hook 'org-agenda-mode-hook '(lambda ()
                                   (hl-line-mode 1)) 'append)
#+end_src
** Shortcuts
org-agenda everywhere.

#+begin_src emacs-lisp
(global-set-key "\C-ca" 'org-agenda)
#+end_src

* Modules
** straight.el
#+begin_src elisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src
** paredit
#+begin_src elisp
  (use-package paredit
  :ensure t
  :config
  ;(add-hook 'emacs-lisp-mode-hook #'paredit-mode)
  ;; enable in the *scratch* buffer
  ;(add-hook 'lisp-interaction-mode-hook #'paredit-mode)
  ;(add-hook 'ielm-mode-hook #'paredit-mode)
  ;(add-hook 'lisp-mode-hook #'paredit-mode)
  ;(add-hook 'eval-expression-minibuffer-setup-hook #'paredit-mode)
;  (diminish 'paredit-mode "()")
)

#+end_src
** Tabbar

Show a tabbar at the top of the screen.

#+begin_src emacs-lisp 
  ;; (use-package tabbar
  ;; :ensure t
  ;; :config (tabbar-mode 0)
  ;; )
#+end_src


#+begin_src emacs-lisp
;(global-tab-line-mode 1)
#+end_src


#+begin_src emacs-lisp
  ;; (use-package centaur-tabs :ensure t
  ;; :demand
  ;; :config
  ;; (centaur-tabs-mode t)
  ;; :bind
  ;; ("C-<prior>" . centaur-tabs-backward)
  ;; ("C-<next>" . centaur-tabs-forward))
#+end_src
** Treemacs
A file browser.

#+begin_src emacs-lisp 

  ;; (use-package treemacs
  ;;    :ensure t
  ;;    :defer t
  ;;    :config
  ;;    (progn

  ;;      (setq treemacs-follow-after-init          t
  ;;            treemacs-width                      35
  ;;            treemacs-indentation                2
  ;;            treemacs-git-integration            t
  ;;            treemacs-collapse-dirs              3
  ;;            treemacs-silent-refresh             nil
  ;;            treemacs-change-root-without-asking nil
  ;;            treemacs-sorting                    'alphabetic-desc
  ;;            treemacs-show-hidden-files          t
  ;;            treemacs-never-persist              nil
  ;;            treemacs-is-never-other-window      nil
  ;;            treemacs-goto-tag-strategy          'refetch-index)

  ;;      (treemacs-follow-mode t)
  ;;      (treemacs-filewatch-mode t))
  ;;    :bind
  ;;    (:map global-map
  ;;          ([f8]        . treemacs-toggle)
  ;;          ([f9]        . treemacs-projectile-toggle)
  ;;          ("<C-M-tab>" . treemacs-toggle)
  ;;          ("M-0"       . treemacs-select-window)
  ;;          ("C-c 1"     . treemacs-delete-other-windows)
  ;;        ))


  ;;  (use-package treemacs-projectile
  ;;    :defer t
  ;;    :ensure t
  ;;    :config
  ;;    (setq treemacs-header-function #'treemacs-projectile-create-header)
  ;;    )



#+end_src

** Projectile

#+begin_src emacs-lisp 
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (setq projectile-project-search-path '("~/workspace/" "~/workspace/github" ("~/Exercism/emacs-lisp/" . 1)))
#+end_src

** Random
#+begin_src emacs-lisp
(use-package org-download :ensure t )
#+end_src

fzf support
#+begin_src emacs-lisp 
;(use-package fzf :ensure t)
#+end_src

#+begin_src emacs-lisp 
(use-package all-the-icons 
:ensure t
:defer 0.5)
#+end_src

[[https://github.com/gregsexton/origami.el/tree/e558710a975e8511b9386edc81cd6bdd0a5bda74][Fancy text folding]]
#+begin_src emacs-lisp 
;(use-package origami :ensure t)
#+end_src

Highlight current line
#+begin_src emacs-lisp 
(use-package beacon
:ensure t
:config
(beacon-mode 1))
#+end_src


#+begin_src emacs-lisp 
(use-package color-theme-modern
  :ensure t)

#+end_src

WhichKey
#+begin_src emacs-lisp 

(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+end_src


dimmer, highlight current buffer
#+begin_src emacs-lisp 
  (use-package dimmer
    :ensure t
    :config
(setq dimmer-adjustment-mode :both)
     (dimmer-configure-which-key)
  ;   (dimmer-configure-helm)
     (dimmer-mode t))
#+end_src

org-roam
#+begin_src emacs-lisp 
    ;; keybindings for org-roam


    (use-package org-roam
      :ensure t
      :custom
      (org-roam-directory (file-truename "~/org-roam"))
      :bind (("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ("C-c n g" . org-roam-graph)
             ("C-c n i" . org-roam-node-insert)
             ("C-c n I" . org-roam-node-insert-immediate)
             ("C-c n c" . org-roam-capture)
             ("C-c n t" . org-roam-dailies-goto-today)
             ("C-c n y" . org-roam-dailies-goto-previous-note)
             ("C-c n n" . org-roam-dailies-goto-tomorrow) 
             ("C-c n u" . org-roam-ui-open) 
             ;; Dailies
             )
      :config
      (org-roam-db-autosync-mode)
      ;; If using org-roam-protocol
      :init
      (require 'org-roam-protocol)
      (setq org-roam-db-node-include-function
            (lambda ()
              (not (member "DO_NOT_ORG_ROAM" (org-get-tags)))))
      )


  ;    (setq org-roam-db-node-include-function
   ;     (lambda ()
   ;       (not (member "DO_NOT_ORG_ROAM" (org-get-tags)))))

#+end_src


org-roam-ui
#+begin_src emacs-lisp
    (use-package org-roam-ui
      :ensure t
      :after org-roam
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  ;;  :hook (after-init . org-roam-ui-mode)
      :config
      (setq org-roam-ui-sync-theme t
            org-roam-ui-follow nil 
            org-roam-ui-update-on-save t
            org-roam-ui-open-on-start nil)
            (run-with-idle-timer 100 nil (lambda () org-roam-ui-mode))
  )


  ;; dont save for desktop.el
    (add-to-list 'desktop-minor-mode-table
               '(org-roam-ui-mode nil))
  (add-to-list 'desktop-minor-mode-table
               '(org-roam-ui-follow-mode nil))
#+end_src

helm

#+begin_src emacs-lisp 
   (use-package helm
     :ensure t
     :config
   (global-set-key (kbd "M-x") #'helm-M-x)
   (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
   (global-set-key (kbd "C-x C-f") #'helm-find-files)
  (helm-mode 1)
  )
#+end_src

python

#+begin_src emacs-lisp 
(use-package elpy
  :ensure t
  :config
(elpy-enable)) ;; enable python support

;; Enable Flycheck
(when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))

;; python formatter
(use-package blacken :ensure t)
(use-package dap-mode :ensure t)
;(use-package dap-ui :ensure t)
;(use-package dap-python :ensure t :config (dap-mode 1) (dap-ui-mode 1))
#+end_src

https://github.com/zk-phi/indent-guide
show vertical lines to guide indentation
#+begin_src emacs-lisp
  (use-package indent-guide
    :ensure t
    :config
    (indent-guide-global-mode))
#+end_src

[[https://github.com/jacktasia/dumb-jump#obsolete-commands-and-options][Dumb jump]]
Note, that this disables etags.

Use `C-M g` to jump.

#+begin_src emacs-lisp
  (use-package dumb-jump
     :ensure t
     :config
      (setq xref-backend-functions (remq 'etags--xref-backend xref-backend-functions))
       (add-to-list 'xref-backend-functions #'dumb-jump-xref-activate t))
#+end_src


git-auto-commit-mode

track every change in git.
#+begin_src emacs-lisp
    (use-package git-auto-commit-mode
      :ensure t
  )

#+end_src

[[https://github.com/emacsorphanage/helm-ag][helm-ag]]
#+begin_src emacs-lisp
  (use-package helm-ag
     :ensure t)
   
#+end_src


[[https://melpa.org/#/no-littering][no-literring!]]
#+begin_src emacs-lisp
;(use-package no-littering :ensure t)
#+end_src

#+begin_src emacs-lisp
(use-package emojify :ensure t
  :hook (after-init . global-emojify-mode))
#+end_src


[[https://melpa.org/#/expand-region][expand-region]], intelligently adjust selection
#+begin_src emacs-lisp
(use-package expand-region :ensure t :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+end_src

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))
#+end_src


Fuzzy? matching. ~org refi~, matches ~org-refile~ and ~org-agenda-refile~
#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :custom (completion-styles '(orderless)))
#+end_src


#+begin_src emacs-lisp
(defun org-add-my-extra-fonts ()
  "Add extra fonts."
  (add-to-list 'org-font-lock-extra-keywords '("\\(!\\)\\([^\n\r\t]+?\\)\\(!\\)" (1 '(face highlight invisible t)) (2 'highlight t) (3 '(face highlight invisible t))) t))

(add-hook 'org-font-lock-set-keywords-hook #'org-add-my-extra-fonts)

; highlighting https://www.gonsie.com/blorg/org-highlight.html
(defun my-html-mark-tag (text backend info)
  "Transcode :blah: into <mark>blah</mark> in body text."
  (when (org-export-derived-backend-p backend 'html)
    (let ((text (replace-regexp-in-string "\\(!\\)\\([^\n\r\t]+?\\)\\(!\\)" "<mark>"  text nil nil 1 nil)))
      (replace-regexp-in-string "\\(<mark>\\)\\([^\n\r\t]+?\\)\\(!\\)" "</mark>" text nil nil 3 nil))))

; TODO it looks like it's not available during load. need to arrange it in correct order.
;(add-to-list 'org-export-filter-plain-text-functions 'my-html-mark-tag)

 #+end_src
** ox-hugo
 #+begin_src elisp
    (use-package ox-hugo
      :ensure t
      :config
        (use-package ox-hugo
      :ensure t
      :config
      ))
 #+end_src

** js2 (TypeScript refactoring)
 #+begin_src elisp
   ;; (use-package js2-refactor
   ;;   :ensure t
   ;;   :config
   ;;   (add-hook 'js2-mode-hook #'js2-refactor-mode)
   ;;   (js2r-add-keybindings-with-prefix "C-c C-m")
   ;;   )

 #+end_src


** Mocha (JS testing support)
 #+begin_src elisp
   (use-package mocha
     :ensure t)

 #+end_src

** Evil Mode üòà
 #+begin_src elisp
   (use-package evil
     :ensure t
     :config
     (require 'evil)
     (evil-mode 1)
     )
   
   (evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
 #+end_src

** Pretty links
 #+begin_src elisp
   ; (use-package org-link-beautify
   ;   :ensure t
   ;   :config
   ;   (org-link-beautify-mode 0)
   ;   )
 #+end_src

** Tide (Typescript interactive development environment for mac)

 #+begin_src elisp
   ;; (use-package tide
   ;;   :ensure t
   ;;   :after (typescript-mode company flycheck)
   ;;   :hook ((typescript-mode . tide-setup)
   ;;          (typescript-mode . tide-hl-identifier-mode)
   ;;          (before-save . tide-format-before-save)))

   ;; (use-package typescript-mode
   ;;   :ensure t
   ;;   :config
   ;;   (require 'ansi-color) ;; clean up compiler output from tsc
   ;;   (defun colorize-compilation-buffer ()
   ;;     (ansi-color-apply-on-region compilation-filter-start (point-max)))
   ;;   (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
   ;;   )
 #+end_src



** LSP Mode
#+begin_src elisp
    (use-package lsp-mode
  :ensure t
      :init
      ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
      (setq lsp-keymap-prefix "C-c l")
      :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
             (typescript-mode . lsp)
             ;; if you want which-key integration
             (lsp-mode . lsp-enable-which-key-integration))
      :commands lsp)

    ;; optionally
    (use-package lsp-ui :ensure t :commands lsp-ui-mode)
    ;; if you are helm user
    (use-package helm-lsp :ensure t :commands helm-lsp-workspace-symbol)
    ;; if you are ivy user
    (use-package lsp-treemacs :ensure t :commands lsp-treemacs-errors-list)

    ;; optionally if you want to use debugger
  ;  (use-package dap-mode :ensure t)
   ; (use-package dap-typescript :ensure t) 

    ;; optional if you want which-key integration
    (use-package which-key
        :config
        (which-key-mode))


#+end_src
** Color in terminal (like M-x compile)
#+begin_src elisp
  (use-package xterm-color :ensure t
    :config
    (require 'xterm-color)
    (setq compilation-environment '("TERM=xterm-256color"))
    (defun my/advice-compilation-filter (f proc string)
      (funcall f proc (xterm-color-filter string)))
    (advice-add 'compilation-filter :around #'my/advice-compilation-filter))
#+end_src

** Compile mode improvements
From [[https://massimilianomirra.com/notes/lightweight-external-command-integration-in-emacs-via-compilation-mode/][here]].
#+begin_src emacs-lisp
  (setq compilation-scroll-output 'first-error)
  (setq scroll-conservatively 101)
#+end_src
** Anki
#+begin_src elisp
  (use-package anki-editor
    :ensure t
    :config
    ; I like making decks
    (setq anki-editor-create-decks 't))
    (customize-set-variable 'org-anki-default-deck "Mega::org-anki")
#+end_src
** Gcal
#+begin_src elisp
  (use-package org-gcal
    :ensure t
    :after org
    :config
    (setq org-gcal-header-alist '(("dmitrym@gmail.com" . "#+PROPERTY: TIMELINE_FACE \"pink\"\n"))
          org-gcal-file-alist '(("dmitrym@gmail.com" .  "~/Dropbox/orgmode/gcal.org")
                                ("dmitry@vericatch.com" .  "~/Dropbox/orgmode/vericatch_gcal.org")
                                )
          org-gcal-auto-archive nil
          org-gcal-notify-p nil))

                                          ;(add-hook 'org-agenda-mode-hook 'org-gcal-fetch)
                                          ;(add-hook 'org-capture-after-finalize-hook 'org-gcal-fetch))

#+end_src
** Org-capture-popout frame
#+begin_src emacs-lisp
  (load-file "~/.emacs.d/extra/capture.el")
#+end_src
** 
** Company mode (autocompletion)
#+begin_src elisp
  (use-package company
  :ensure t
  :bind (:map company-active-map
         ("C-n" . company-select-next)
         ("C-p" . company-select-previous))
  :config
  (setq company-idle-delay 0.3)
  (global-company-mode t))

#+end_src
** [[https://github.com/alphapapa/ts.el][ts.el]] (time manipulation)
#+begin_src elisp
   (use-package ts :ensure t)

 
#+end_src
** selectrum
#+begin_src emacs-lisp
  ;;   (use-package selectrum :ensure t
  ;;   :init
  ;;   (selectrum-mode +1)
  ;;   ;; to make sorting and filtering more intelligent
  ;; (selectrum-prescient-mode +1)

  ;; ;; to save your command history on disk, so the sorting gets more
  ;; ;; intelligent over time
  ;; (prescient-persist-mode +1)
  ;;   (setq completion-styles '(orderless)))
  ;;   ;(setq completion-styles '(flex substring partial-completion)))





  ;; (setq mini-frame-show-parameters                                        
  ;;     (lambda ()                                                                
  ;;       (let* ((info (posframe-poshandler-argbuilder))
  ;;              (posn (posframe-poshandler-point-bottom-left-corner info))
  ;;              (left (car posn))
  ;;              (top (cdr posn)))
  ;;         `((left . ,left)
  ;;           (top . ,top)))))
#+end_src
** evil goggles
#+begin_src elisp
  ;; (use-package evil-goggles
  ;; :ensure t
  ;; :config
  ;; (evil-goggles-mode)

  ;; ;; optionally use diff-mode's faces; as a result, deleted text
  ;; ;; will be highlighed with `diff-removed` face which is typically
  ;; ;; some red color (as defined by the color theme)
  ;; ;; other faces such as `diff-added` will be used for other actions
;;  (evil-goggles-use-diff-faces))
#+end_src

#+RESULTS:


** dark room
#+begin_src
  (use-package darkroom :ensure t)
#+end_src

** raindbow delimeters
#+begin_src
  (use-package rainbow-delimiters :ensure t
    :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
           (clojure-mode . rainbow-delimiters-mode))
    )
#+end_src


** [[https://github.com/publicimageltd/delve][delve]]

]#+begin_src elisp
 #  (use-package delve :ensure t
 #  :straight (:repo "publicimageltd/delve"
 #             :host github
 #             :type git)
 #  ;;:bind
 #  ;; the main entry point, offering a list of all stored collections
 #  ;; and of all open Delve buffers:
 #  ;;(("<f12>" . delve))
 #  :config
 #  ;; set meaningful tag names for the dashboard query
 #  ;;(setq delve-dashboard-tags '("Tag1" "Tag2"))
 # ;; turn on delve-minor-mode when org roam file is opened:
 #  (delve-global-minor-mode))
#+end_src


** roam timestamps
#+begin_src elisp

(use-package org-roam-timestamps
  :after org-roam
  :config (org-roam-timestamps-mode) (setq org-roam-timestamps-remember-timestamps t))

#+end_src

** org-pomodoro-third-time
#+begin_src elisp
    (use-package org-pomodoro-third-time :ensure t :init (org-pomodoro-third-time-mode +1)
  :straight (:repo "telotortium/org-pomodoro-third-time"
             :host github
             :type git))
 

#+end_src


** PlantUML
#+begin_src elisp
  ;;  (use-package plantuml-mode :ensure t :init (setq plantuml-executable-path "/opt/homebrew/bin/plantuml" plantuml-default-exec-mode 'executable) :mode (("\\.plantuml\\'" . plantuml-mode)))

  (use-package plantuml-mode :ensure t :init
    ;; Sample executable configuration
    ;; this is for org  mode export
    (setq org-plantuml-executable-path "/opt/homebrew/bin/plantuml")
    (setq org-plantuml-exec-mode 'plantuml)

  ;; this is for the majhor mode :facepalm
    (setq plantuml-executable-path "/opt/homebrew/bin/plantuml")
    (setq plantuml-default-exec-mode 'executable)


    (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
    (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))
    (org-babel-do-load-languages 'org-babel-load-languages '((shell . t)))
    (setq org-confirm-babel-evaluate nil))


  ;; dont ask to evaluate blocks 


#+end_src

* Last 
Start maximized
** TODO There's some issue with this; probably due to the order of operations?
#+begin_src emacs-lisp
  (add-hook 'window-setup-hook 'toggle-frame-maximized t)
  (toggle-frame-maximized)
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))
  
#+end_src


** start server
#+begin_src emacs-lisp
  (server-start)
#+end_src

** misc
timer setup.
#+begin_src emacs-lisp

  (setq dmm-agenda-timer nil)
  (run-with-idle-timer (* 60 30) t (lambda () (org-gcal-sync)))
  (defun dm/set-timer ()
    (when dmm-agenda-timer (cancel-timer dmm-agenda-timer))
    (setq dmm-agenda-timer (run-with-idle-timer 20 nil (lambda () (load-file "~/workspace/github/agenda-html/agenda-html.el")))))
  (add-hook 'org-after-todo-state-change-hook 'dm/set-timer)
#+end_src

* Custom LISP
** pomodoro support
#+begin_src emacs-lisp
  (defun jx/produce-pomodoro-string-for-menu-bar ()
    "Produce the string for the current pomodoro counter to display on the menu bar"
    (let ((prefix (cl-case org-pomodoro-state
                    (:pomodoro "P")
                    (:overtime "O")
                    (:short-break "B")
                    (:long-break "LB"))))
      (if (and (org-pomodoro-active-p) (> (length prefix) 0))
          (list prefix (org-pomodoro-format-seconds)) "N/A")))



  (defun org-pomodoro-third-time-increment ()
    (org-pomodoro-third-time-end-in (floor ( / (+ (org-pomodoro-remaining-seconds) 300) 60))))


  (defun org-pomodoro-third-time-decrement ()
    (org-pomodoro-third-time-end-in (floor ( / (- (org-pomodoro-remaining-seconds) 300) 60))))


  (defun org-pomodoro-restart ()
    (org-pomodoro-kill)
    (org-pomodoro '(16)))
#+end_src

** bind immediate
#+begin_src elisp
  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (cons arg args))
          (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                    '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))
#+end_src



** time stamps in warnings
#+begin_src elisp
  ;;   (defun sh/current-time-microseconds ()
  ;;   "Return the current time formatted to include microseconds."
  ;;   (let* ((nowtime (current-time))
  ;;          (now-ms (nth 2 nowtime)))
  ;;     (concat (format-time-string "[%Y-%m-%dT%T" nowtime) (format ".%d]" now-ms))))

  ;; (defun sh/ad-timestamp-message (FORMAT-STRING &rest args)
  ;;   "Advice to run before `message' that prepends a timestamp to each message.

  ;; ;; Activate this advice with:
  ;; ;; (advice-add 'message :before 'sh/ad-timestamp-message)"
  ;;   (unless (string-equal FORMAT-STRING "%s%s")
  ;;     (let ((deactivate-mark nil)
  ;;           (inhibit-read-only t))
  ;;       (with-current-buffer "*Messages*"
  ;;         (goto-char (point-max))
  ;;         (if (not (bolp))
  ;;           (newline))
  ;;         (insert (sh/current-time-microseconds) " ")))))

  ;; (advice-add 'message :before 'sh/ad-timestamp-message)

#+end_src





* Testing

Always save M-x history even when it fails [[https://emacs.stackexchange.com/questions/45069/how-do-i-persist-m-x-calls-so-they-can-be-displayed-in-mru-order][source]].
Preserve M-x commands (MRU).

#+begin_quote elisp
(setq helm-M-x-always-save-history t)

#+end_quote

** From [[https://systemcrafters.net/emacs-from-scratch/the-best-default-settings/][source]] [2022-02-22 Tue]

Remember recent files, 
#+begin_src elisp
(recentf-mode 1)
#+end_src

Remember minibuffer
#+begin_src elisp
  (setq history-length 25)
  (savehist-mode 1)
#+end_src


Remember and restore the last cursor location of opened files
#+begin_src elisp
  (save-place-mode 1)
#+end_src


Move customization variables to a separate file and load it
#+begin_src elisp
(setq custom-file (locate-user-emacs-file "custom-vars.el"))
#+end_src

#+begin_src elisp
  (global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t)



#+end_src


** [2022-02-24 Thu]
*** [[https://github.com/nobiot/org-transclusion][org-transclusion]] include nodes from other

Suggested keymappings:


(define-key global-map (kbd "<f12>") #'org-transclusion-add)
(define-key global-map (kbd "C-n t") #'org-transclusion-mode)


#+begin_src elisp
  (use-package org-transclusion :ensure t
  :after org)
#+end_src


*** export path for org-export/babel
[[http://rwx.io/posts/org-export-configurations/][source]]

#+begin_src elisp
  ;; (defvar org-export-output-directory-prefix "export_" "prefix of directory used for org-mode export")

  ;; (defadvice org-export-output-file-name (before org-add-export-dir activate)
  ;;   "Modifies org-export to place exported files in a different directory"
  ;;   (when (not pub-dir)
  ;;     (setq pub-dir (concat org-export-output-directory-prefix (substring extension 1)))
  ;;     (when (not (file-directory-p pub-dir))
  ;;       (make-directory pub-dir))))



  ;; (defun org-export-output-file-name-modified (orig-fun extension &optional subtreep pub-dir)
  ;;   (unless pub-dir
  ;;     (setq pub-dir "exported-org-files")
  ;;     (unless (file-directory-p pub-dir)
  ;;       (make-directory pub-dir)))
  ;;   (apply orig-fun extension subtreep pub-dir nil))
  ;; (advice-add 'org-export-output-file-name :around #'org-export-output-file-name-modified) 
    #+end_src



#+begin_src elisp

  (setq org-publish-project-alist
        '(("org-notes"
           :base-directory "~/org-roam/"
           :publishing-directory "~/org-roam/export"
           :publishing-function org-html-publish-to-html
          )

          ("org-static"
           :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
           :base-directory "~/org-roam/"
           :publishing-directory "~/org-roam/export"
           :recursive t
           :publishing-function org-publish-attachment
           )

          ("org" :components ("org-notes" "org-static"))

          )
        )

#+end_src



** [2022-02-26 Sat]o

focus-autosave-mode, save all emacs buffers when emacs loses focus
#+begin_src elisp
  (use-package focus-autosave-mode :ensure t :init (focus-autosave-mode))


#+end_src

** [2022-03-03 Thu]
Load hyperscheduler locally and bind a key.


#+begin_src elisp
  (push (expand-file-name "/Users/dmitry/workspace/org-hyperscheduler") load-path)
  (require 'org-hyperscheduler)
#+end_src

#+begin_src elisp
  (use-package org-hyperscheduler
    :bind (("C-c d t" . org-hs-open)
           ))
#+end_src



Nano emacs theme
#+begin_src elisp
;  (straight-use-package
;  '(nano-emacs :type git :host github :repo "rougier/nano-emacs"))
  ;(use-package nano)
; (use-package nano-theme-dark)
 ; (use-package nano-faces)
 ; (use-package nano)

#+end_src


** [2022-03-09 Wed]
blogging with ox-hugo
#+begin_src elisp
  (use-package ox-hugo
  :ensure t   ;Auto-install the package from Melpa
  :pin melpa  ;`package-archives' should already have ("melpa" . "https://melpa.org/packages/")
  :after ox)
#+end_src


** [2022-03-14 Mon]
#+begin_src elisp
  (setq mac-command-modifier 'super)
  (global-set-key (kbd "s-v") 'org-yank)
#+end_src


** [2022-03-14 Mon]
#+begin_src elisp
  (use-package centaur-tabs
  :ensure t
  :hook
  (dashboard-mode . centaur-tabs-local-mode)
  (vterm-mode . centaur-tabs-local-mode)
  (calendar-mode . centaur-tabs-local-mode)
  (org-agenda-mode . centaur-tabs-local-mode)
  (helpful-mode . centaur-tabs-local-mode)
  (xwidget-webkit-mode . centaur-tabs-local-mode)
  :config
  (centaur-tabs-mode)
  (centaur-tabs-headline-match)
  (centaur-tabs-group-by-projectile-project)
  (setq centaur-tabs-style "box"
                centaur-tabs-height 27
        centaur-tabs-gray-out-icons 'buffer
                centaur-tabs-set-modified-marker t
                centaur-tabs-show-navigation-buttons nil
                centaur-tabs-plain-icons t
                centaur-tabs-set-icons t
                uniquify-buffer-name-style 'forward)
  :bind
  (:map evil-normal-state-map
             ("g t" . centaur-tabs-forward)
             ("g T" . centaur-tabs-backward)))

#+end_src




#+begin_src elisp

      (use-package evil :ensure t
        :hook (after-init . evil-mode)
        :init
        (setq evil-undo-system 'undo-redo)
        (setq evil-want-integration t)
        (setq evil-want-keybinding nil)
        (setq evil-want-C-u-scroll t)
        (setq evil-want-C-i-jump nil)
        :config
        (setq evil-emacs-state-cursor '("#A3D4D5" box))
        (setq evil-normal-state-cursor '("#A3D4D5" box))
        (setq evil-visual-state-cursor '("#7FB4CA" box))
        (setq evil-insert-state-cursor '("#FF9E3B" bar))
        (setq evil-replace-state-cursor '("red" hbar))
        (setq evil-operator-state-cursor '("red" hollow))

        (evil-ex-define-cmd "q[uit]" 'kill-buffer-and-window)

        (define-key evil-motion-state-map (kbd "M-u") #'evil-undo)
        (define-key evil-motion-state-map (kbd "M-U") #'evil-redo)
        (define-key evil-motion-state-map (kbd "M-0") #'treemacs)
        (define-key evil-motion-state-map (kbd "q") #'exit-minibuffer)
        (define-key evil-motion-state-map (kbd "C-f") #'deadgrep)
        (define-key evil-motion-state-map "/" 'swiper))



    (use-package evil-collection
      :after evil
      :config
      (evil-collection-init))



  ;; Search files, and do it with speed and style
  (use-package swiper :ensure t
    :config
    (setq swiper-goto-start-of-match t))




  (use-package block-nav :ensure t
  :commands (block-nav-next-block block-nav-previous-block block-nav-next-indentation-level block-nav-previous-indentation-level)
  :bind
  ("C-c C-j" . block-nav-next-block)
  ("C-c C-k" . block-nav-previous-block)
  ("C-c C-l" . block-nav-next-indentation-level)
  ("C-c C-h" . block-nav-previous-indentation-level))
#+end_src




